{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Creating a new repository","keywords":["Software engineering","Git"]},"html":"<h2>Creating a new repository</h2>\n<p>Before we can use git, we need to create a repo. To create a repo use the <code>git init</code> command.</p>\n<p>But, before we do that, we also need to create a new or use an existing directory to store our files. There can be no existing version control in the directory.</p>\n<p>When inside the directory, type <code>git init</code> to create a new repository. Notice it will create a <code>.git</code> directory.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n</br>\n\n<h3>Exercise: Create a new repository</h3>\n<blockquote>\n<p>Create a new git repo <code>my-git-repo</code> in a new directory. You can put this anywhere as long as it is not in an existing git repo.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Create a new repository</h3>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> my-git-repo\n<span class=\"hljs-built_in\">cd</span> my-git-repo\ngit init\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Everything is in the repository</h2>\n<p>Every single git repo comes with a <code>.git</code> directory. This directory contains all the information about the repository.</p>\n<blockquote>\n<p>This means, if you delete the <code>.git</code> directory, you will lose all the history and changes. But it is also how you can remove git from a directory.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Verify the git repository</h3>\n<blockquote>\n<p>Verify that you have created a repository by listing out the files and directories in the git state directory.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Verify the git repository</h3>\n<p>From within <code>my-git-repo</code>, run <code>find .git</code>:</p>\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-bash\">.git\n.git/config\n.git/objects\n.git/objects/pack\n.git/objects/info\n.git/HEAD\n.git/info\n.git/info/exclude\n.git/description\n.git/hooks\n.git/hooks/commit-msg.sample\n.git/hooks/pre-rebase.sample\n.git/hooks/sendemail-validate.sample\n.git/hooks/pre-commit.sample\n.git/hooks/applypatch-msg.sample\n.git/hooks/fsmonitor-watchman.sample\n.git/hooks/pre-receive.sample\n.git/hooks/prepare-commit-msg.sample\n.git/hooks/post-update.sample\n.git/hooks/pre-merge-commit.sample\n.git/hooks/pre-applypatch.sample\n.git/hooks/pre-push.sample\n.git/hooks/update.sample\n.git/hooks/push-to-checkout.sample\n.git/refs\n.git/refs/heads\n.git/refs/tags\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>This is basically what <strong>peak empty</strong> git repository looks like.</p>\n<p>Essentially git is stateless. Every time we run a command, git has to figure out where we are and what has changed etc.</p>\n</br>\n</br>\n","markdown":"\n## Creating a new repository\n\nBefore we can use git, we need to create a repo. To create a repo use the `git init` command.\n\nBut, before we do that, we also need to create a new or use an existing directory to store our files. There can be no existing version control in the directory.\n\nWhen inside the directory, type `git init` to create a new repository. Notice it will create a `.git` directory.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n</br>\n\n### Exercise: Create a new repository\n\n> Create a new git repo `my-git-repo` in a new directory. You can put this anywhere as long as it is not in an existing git repo.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Create a new repository\n\n```bash\nmkdir my-git-repo\ncd my-git-repo\ngit init\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Everything is in the repository\n\nEvery single git repo comes with a `.git` directory. This directory contains all the information about the repository.\n\n> This means, if you delete the `.git` directory, you will lose all the history and changes. But it is also how you can remove git from a directory.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Verify the git repository\n\n> Verify that you have created a repository by listing out the files and directories in the git state directory.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Verify the git repository\n\nFrom within `my-git-repo`, run `find .git`:\n\n**Output:**\n\n```bash\n.git\n.git/config\n.git/objects\n.git/objects/pack\n.git/objects/info\n.git/HEAD\n.git/info\n.git/info/exclude\n.git/description\n.git/hooks\n.git/hooks/commit-msg.sample\n.git/hooks/pre-rebase.sample\n.git/hooks/sendemail-validate.sample\n.git/hooks/pre-commit.sample\n.git/hooks/applypatch-msg.sample\n.git/hooks/fsmonitor-watchman.sample\n.git/hooks/pre-receive.sample\n.git/hooks/prepare-commit-msg.sample\n.git/hooks/post-update.sample\n.git/hooks/pre-merge-commit.sample\n.git/hooks/pre-applypatch.sample\n.git/hooks/pre-push.sample\n.git/hooks/update.sample\n.git/hooks/push-to-checkout.sample\n.git/refs\n.git/refs/heads\n.git/refs/tags\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThis is basically what **peak empty** git repository looks like.\n\nEssentially git is stateless. Every time we run a command, git has to figure out where we are and what has changed etc.\n\n</br>\n</br>\n","slug":"creating-a-repo","title":"Creating a new repository","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/C-creating-a-repo.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/basic-commands-and-commit","prevSlug":"/itu-bds-sdse/lessons/git-basics/git-config"}},"__N_SSG":true}