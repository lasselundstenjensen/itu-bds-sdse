{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Resetting","keywords":["Software engineering","Git"]},"html":"<h2>Reset</h2>\n<p>It is a way to discard current changes. At least this is the most common use case. There are other uses for <code>git reset</code> but we will focus on this application only in the course.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Soft reset</h3>\n<p>Git soft reset will move the HEAD to a previous commit but will keep the changes in the working directory. This is useful when you want to keep the changes and maybe put them on a branch instead.</p>\n<pre><code class=\"hljs language-bash\">git reset --soft &lt;commit-ish&gt;\n</code></pre></br>\n\n<h3>Example: Undo the last commit</h3>\n<pre><code class=\"hljs language-bash\">git reset --soft HEAD~1\n</code></pre><p>If we do a <code>git status</code> we will see that the changes that were reset are in the index (i.e. staged).</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Changing a previous commit</h2>\n<p>We have two options here.</p>\n<ol>\n<li><p><strong>Amend the commit</strong></p>\n<pre><code class=\"hljs language-bash\">git commit --amend\n</code></pre><p> This will open the editor with the previous commit message. We can change the message and save the file with <code>:wq</code> and then press <code>Enter</code>.</p>\n</li>\n<li><p><strong>Soft reset</strong></p>\n<pre><code class=\"hljs language-bash\">git reset --soft &lt;commit-ish&gt;\n</code></pre><p>This will move the HEAD to the previous commit but keep the changes in the working directory. We can then commit the changes again.</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>Remember</strong></p>\n<p>Both of these are changing history and creating new SHAs.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Hard reset</h2>\n<p>This is the most dangerous reset. It will move the HEAD to a previous commit and discard all changes in the working directory.</p>\n<pre><code class=\"hljs language-bash\">git reset --hard &lt;commit-ish&gt;\n</code></pre></br>\n\n<h3>Example: Discard all changes</h3>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Undo the last commit</span>\ngit reset --hard HEAD~1\n</code></pre><pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># Undo all changes and reset to latest commit on origin/main</span>\ngit reset --hard origin/main\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Reset a commit</h3>\n<blockquote>\n<ul>\n<li>Navigate to a repository.</li>\n<li>Create a new file <code>reset.md</code>.</li>\n<li>Add some text to the file and commit it with message <code>want to reset this</code>.</li>\n<li>Undo the commit by hard resetting it.</li>\n<li>Check the logs.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Reset a commit</h3>\n<p>Navigate to a repository. Create a new change and commit it.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;reset&quot;</span> &gt;&gt; reset.md\ngit add reset.md\ngit commit -m <span class=\"hljs-string\">&quot;want to reset this&quot;</span>\n</code></pre><p>Then we delete the change, which is the last commit, but hard resetting.</p>\n<pre><code class=\"hljs language-bash\">git reset --hard HEAD~1\n</code></pre><p>Check the logs.</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span> --oneline\n</code></pre></br>\n</br>\n\n<h3>Observation</h3>\n<p>Only changes that git <em><strong>knows</strong></em> about will be deleted in the hard reset. Any untracked changes will remain.</p>\n<blockquote>\n<p><strong>Warning</strong></p>\n<p>It is easy to loose changes that are staged but not committed.</p>\n</blockquote>\n</br>\n</br>\n","markdown":"\n## Reset\n\nIt is a way to discard current changes. At least this is the most common use case. There are other uses for `git reset` but we will focus on this application only in the course.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Soft reset\n\nGit soft reset will move the HEAD to a previous commit but will keep the changes in the working directory. This is useful when you want to keep the changes and maybe put them on a branch instead.\n\n```bash\ngit reset --soft <commit-ish>\n```\n\n</br>\n\n### Example: Undo the last commit\n\n```bash\ngit reset --soft HEAD~1\n```\n\nIf we do a `git status` we will see that the changes that were reset are in the index (i.e. staged).\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Changing a previous commit\n\nWe have two options here.\n\n1. **Amend the commit**\n   ```bash\n   git commit --amend\n   ```\n    This will open the editor with the previous commit message. We can change the message and save the file with `:wq` and then press `Enter`.\n\n2. **Soft reset**\n   ```bash\n   git reset --soft <commit-ish>\n   ```\n   This will move the HEAD to the previous commit but keep the changes in the working directory. We can then commit the changes again.\n\n> **Remember**\n> \n> Both of these are changing history and creating new SHAs.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Hard reset\n\nThis is the most dangerous reset. It will move the HEAD to a previous commit and discard all changes in the working directory.\n\n```bash\ngit reset --hard <commit-ish>\n```\n\n</br>\n\n### Example: Discard all changes\n\n```bash\n# Undo the last commit\ngit reset --hard HEAD~1\n```\n\n```bash\n# Undo all changes and reset to latest commit on origin/main\ngit reset --hard origin/main\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Reset a commit\n\n> * Navigate to a repository.\n> * Create a new file `reset.md`.\n> * Add some text to the file and commit it with message `want to reset this`.\n> * Undo the commit by hard resetting it.\n> * Check the logs.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Reset a commit\n\nNavigate to a repository. Create a new change and commit it.\n\n```bash\necho \"reset\" >> reset.md\ngit add reset.md\ngit commit -m \"want to reset this\"\n```\n\nThen we delete the change, which is the last commit, but hard resetting.\n\n```bash\ngit reset --hard HEAD~1\n```\n\nCheck the logs.\n\n```bash\ngit log --oneline\n```\n\n</br>\n</br>\n\n### Observation\n\nOnly changes that git ***knows*** about will be deleted in the hard reset. Any untracked changes will remain.\n\n> **Warning**\n> \n> It is easy to loose changes that are staged but not committed.\n\n</br>\n</br>\n","slug":"reset","title":"Resetting","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/O-reset.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/tags","prevSlug":"/itu-bds-sdse/lessons/git-basics/revert"}},"__N_SSG":true}