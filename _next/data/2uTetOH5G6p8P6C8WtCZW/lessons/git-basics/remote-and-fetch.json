{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Remote and Fetch","keywords":["Software engineering","Git"]},"html":"<h2>Remote git</h2>\n<p>While you can totally use a git repository for your own personal use, git is really built for collaboration with others.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>So here is a shocker</h2>\n<p>A remote git repository does not actually have to <em><strong>be</strong></em> remote. A bit misleading, yes. A remote git repository is <em><strong>just a copy</strong></em> of the local repository <em><strong>somewhere else</strong></em>.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Create a new repo <code>remote-git</code> and initialize it</h3>\n<blockquote>\n<ul>\n<li>Create a new directory <code>remote-git</code> and navigate into it. <strong>Do not do this inside an existing git repository.</strong></li>\n<li>Initialize the repository.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Create a new repo <code>remote-git</code> and initialize it</h3>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> remote-git\n<span class=\"hljs-built_in\">cd</span> remote-git\ngit init\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>This is distributed version control</h2>\n<p>So, a remote is just another git repository that is of the same project and has changes we may need or may need to share our changes with.</p>\n<p>To manage remotes, we have the <code>git remote</code> command. Read more with <code>man git-remote</code>.</p>\n<p>To add a remote, we use the <code>git remote add &lt;name&gt; &lt;uri&gt;</code> command.</p>\n<p>The URI can be a path to a directory or a URL, like SSH or HTTPS.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Add <code>learn-git</code> as a remote to the <code>remote-git</code> repository</h3>\n<blockquote>\n<ul>\n<li>Add a remote called <code>learn-git</code> to the <code>remote-git</code> repository.</li>\n<li>The URI for the remote is <code>&lt;path-to-your-learn-git-directory&gt;</code>.</li>\n<li>Use <code>origin</code> as the name of the remote. This is good practice for the <em>authority</em> repo.</li>\n<li>Verify that the remote has been added.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Add <code>learn-git</code> as a remote to the <code>remote-git</code> repository</h3>\n<blockquote>\n<p>Here <code>&lt;path-to-your-learn-git-directory&gt;</code> is the path to the <code>learn-git</code> directory on your system. We use <code>../learn-git</code> as path in this example.</p>\n</blockquote>\n<pre><code class=\"hljs language-bash\">git remote add origin ../learn-git\n</code></pre><p>We can check the remotes by using the <code>git remote -v</code> command.</p>\n<pre><code class=\"hljs language-bash\">git remote -v\n</code></pre></br>\n\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">origin  ../learn-git (fetch)\norigin  ../learn-git (push)\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Good practices with remotes</h2>\n</br>\n\n<h3>Remote is a project repository</h3>\n<p>There is a <em>single source of truth</em>, which is the remote project repository. This should be named <code>origin</code>.</p>\n</br>\n\n<h3>Remote is a fork</h3>\n<p>In this case the fork remote repository should be named <code>origin</code> and the project repository should be named <code>upstream</code>.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>Now we will need to merge our changes from <code>learn-git</code> into <code>remote-git</code>.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Fetch</h2>\n<p>All state can be fetched from a remote repository. We use the <code>git fetch</code> command for this.</p>\n<p>This operation does not affect currently checked out branches—just the history about them that is in <code>origin/*</code>.</p>\n</br>\n</br>\n\n<p>(you should do that now)</p>\n</br>\n</br>\n\n<pre><code class=\"hljs language-bash\">git fetch\n</code></pre></br>\n\n<p>The output will look something like this. We got all the information about branches from <code>learn-git</code>.</p>\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">remote: Enumerating objects: 28, done.\nremote: Counting objects: 100% (28/28), done.\nremote: Compressing objects: 100% (17/17), done.\nremote: Total 28 (delta 5), reused 0 (delta 0), pack-reused 0 (from 0)\nUnpacking objects: 100% (28/28), 2.12 KiB | 57.00 KiB/s, done.\nFrom ../learn-git\n * [new branch]      feature             -&gt; origin/feature\n * [new branch]      feature-delete-test -&gt; origin/feature-delete-test\n * [new branch]      feature-rebase-main -&gt; origin/feature-rebase-main\n * [new branch]      feature-two         -&gt; origin/feature-two\n * [new branch]      main                -&gt; origin/main\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>So now we are up to date, right?</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span>\n</code></pre></br>\n</br>\n\n<p>(try it now)</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<blockquote>\n<p>We can use <code>git log origin/main</code> to see the log of the <code>main</code> branch in the remote repository.</p>\n</blockquote>\n<blockquote>\n<p>We can also use <code>git branch -a</code> to see all the branches, including the remote branches.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<blockquote>\n<p><strong>Question:</strong> Can you think of a way to get the changes from the remote?</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>We can do a merge.</p>\n<pre><code class=\"hljs language-bash\">git merge origin/main\n</code></pre></br>\n</br>\n\n<p>But there is also <code>git pull</code>, which we will cover next.</p>\n</br>\n</br>\n","markdown":"\n## Remote git\n\nWhile you can totally use a git repository for your own personal use, git is really built for collaboration with others.\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## So here is a shocker\n\nA remote git repository does not actually have to ***be*** remote. A bit misleading, yes. A remote git repository is ***just a copy*** of the local repository ***somewhere else***.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Create a new repo `remote-git` and initialize it\n\n> * Create a new directory `remote-git` and navigate into it. **Do not do this inside an existing git repository.**\n> * Initialize the repository.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Create a new repo `remote-git` and initialize it\n\n```bash\nmkdir remote-git\ncd remote-git\ngit init\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## This is distributed version control\n\nSo, a remote is just another git repository that is of the same project and has changes we may need or may need to share our changes with.\n\nTo manage remotes, we have the `git remote` command. Read more with `man git-remote`.\n\nTo add a remote, we use the `git remote add <name> <uri>` command.\n\nThe URI can be a path to a directory or a URL, like SSH or HTTPS.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Add `learn-git` as a remote to the `remote-git` repository\n\n> * Add a remote called `learn-git` to the `remote-git` repository.\n> * The URI for the remote is `<path-to-your-learn-git-directory>`.\n> * Use `origin` as the name of the remote. This is good practice for the *authority* repo.\n> * Verify that the remote has been added.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Add `learn-git` as a remote to the `remote-git` repository\n\n> Here `<path-to-your-learn-git-directory>` is the path to the `learn-git` directory on your system. We use `../learn-git` as path in this example.\n\n```bash\ngit remote add origin ../learn-git\n```\n\nWe can check the remotes by using the `git remote -v` command.\n\n```bash\ngit remote -v\n```\n\n</br>\n\n**Output:**\n\n```plaintext\norigin  ../learn-git (fetch)\norigin  ../learn-git (push)\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Good practices with remotes\n\n</br>\n\n### Remote is a project repository\n\nThere is a *single source of truth*, which is the remote project repository. This should be named `origin`.\n\n</br>\n\n### Remote is a fork\n\nIn this case the fork remote repository should be named `origin` and the project repository should be named `upstream`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nNow we will need to merge our changes from `learn-git` into `remote-git`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Fetch\n\nAll state can be fetched from a remote repository. We use the `git fetch` command for this.\n\nThis operation does not affect currently checked out branches—just the history about them that is in `origin/*`.\n\n</br>\n</br>\n\n(you should do that now)\n\n</br>\n</br>\n\n```bash\ngit fetch\n```\n\n</br>\n\nThe output will look something like this. We got all the information about branches from `learn-git`.\n\n**Output:**\n\n```plaintext\nremote: Enumerating objects: 28, done.\nremote: Counting objects: 100% (28/28), done.\nremote: Compressing objects: 100% (17/17), done.\nremote: Total 28 (delta 5), reused 0 (delta 0), pack-reused 0 (from 0)\nUnpacking objects: 100% (28/28), 2.12 KiB | 57.00 KiB/s, done.\nFrom ../learn-git\n * [new branch]      feature             -> origin/feature\n * [new branch]      feature-delete-test -> origin/feature-delete-test\n * [new branch]      feature-rebase-main -> origin/feature-rebase-main\n * [new branch]      feature-two         -> origin/feature-two\n * [new branch]      main                -> origin/main\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nSo now we are up to date, right?\n\n```bash\ngit log\n```\n\n</br>\n</br>\n\n(try it now)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n> We can use `git log origin/main` to see the log of the `main` branch in the remote repository.\n\n> We can also use `git branch -a` to see all the branches, including the remote branches.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n> **Question:** Can you think of a way to get the changes from the remote?\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nWe can do a merge.\n\n```bash\ngit merge origin/main\n```\n\n</br>\n</br>\n\nBut there is also `git pull`, which we will cover next.\n\n</br>\n</br>\n","slug":"remote-and-fetch","title":"Remote and Fetch","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/H-remote-and-fetch.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/pull","prevSlug":"/itu-bds-sdse/lessons/git-basics/head-and-reflog"}},"__N_SSG":true}