{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"HEAD and reflog","keywords":["Software engineering","Git"]},"html":"<h2>HEAD</h2>\n<p>By now you might have noticed that it says <code>HEAD</code> several places in the logs.</p>\n<p>Can you guess what it means...?</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Check out <code>HEAD</code> in the <code>.git</code> directory</h3>\n<p>(not git checkout—just check it out as in: look at it)</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Check out <code>HEAD</code> in the <code>.git</code> directory</h3>\n<p><code>HEAD</code> is a reference to the current commit you have checked out. It is a pointer to the branch you are currently on.</p>\n<p>We should see something like this.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> .git/HEAD\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">ref: refs/heads/main\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>And additionally, we can see the contents of the file <code>refs/heads/main</code>.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">cat</span> .git/refs/heads/main\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">562f95864c377acd831d1027eeba98fa86875d6d\n</code></pre><p>So, literally just a reference to the commit hash you are on.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Reflog</h2>\n<p>This is a bit of a cool command.</p>\n<p>It shows a log of changes to <code>HEAD</code>. So—where <code>HEAD</code> has been pointing to.</p>\n<pre><code class=\"hljs language-bash\">git reflog\n</code></pre></br>\n\n<p>(try it out now)</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">562f958 (HEAD -&gt; main) HEAD@{0}: checkout: moving from feature to main\n312c2e9 (feature) HEAD@{1}: checkout: moving from feature-rebase-main to feature\n109ad4e (feature-rebase-main) HEAD@{2}: checkout: moving from main to feature-rebase-main\n562f958 (HEAD -&gt; main) HEAD@{3}: checkout: moving from feature-rebase-main to main\n109ad4e (feature-rebase-main) HEAD@{4}: rebase (finish): returning to refs/heads/feature-rebase-main\n109ad4e (feature-rebase-main) HEAD@{5}: rebase (pick): C\nb12a712 HEAD@{6}: rebase (pick): B\n562f958 (HEAD -&gt; main) HEAD@{7}: rebase (start): checkout main\n312c2e9 (feature) HEAD@{8}: checkout: moving from feature to feature-rebase-main\n312c2e9 (feature) HEAD@{9}: checkout: moving from main to feature\n562f958 (HEAD -&gt; main) HEAD@{10}: merge feature-two: Fast-forward\n1fef215 HEAD@{11}: checkout: moving from feature-two to main\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<blockquote>\n<p><strong>Question:</strong> What do you think is stored in the <code>.git/logs</code> directory?</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>You can limit search like this.</p>\n<pre><code class=\"hljs language-bash\">git reflog -3  <span class=\"hljs-comment\"># shows the last 3 entries</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Recovering lost commits</h2>\n<p>If you accidentally delete a branch, you can recover it by checking out the commit hash from the reflog.</p>\n<pre><code class=\"hljs language-bash\">git reflog \n<span class=\"hljs-comment\"># find the commit hash</span>\ngit merge &lt;commit-hash&gt;\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Recover a lost commit</h3>\n<blockquote>\n<ul>\n<li>Create a new branch <code>feature-delete-test</code> based on <code>main</code>.</li>\n<li>Checkout <code>feature-delete-test</code>.</li>\n<li>Add a new file with some content (important).</li>\n<li>Commit the changes.</li>\n<li>Switch back to <code>main</code>.</li>\n<li>Delete the branch <code>feature-delete-test</code>.</li>\n<li>Try to recover the branch using the reflog and merge.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Recover a lost commit</h3>\n<p>Create the branch and the change and commit it.</p>\n<pre><code class=\"hljs language-bash\">git checkout main\ngit checkout -b feature-delete-test\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;some text&quot;</span> &gt;&gt; tester.md\ngit add .\ngit commit -m <span class=\"hljs-string\">&quot;some commit message&quot;</span>\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">[feature-delete-test 058f2b5] some commit message\n 1 file changed, 1 insertion(+)\n create mode 100644 tester.md\n</code></pre></br>\n\n<p>Delete the branch.</p>\n<pre><code class=\"hljs language-bash\">git checkout main\ngit branch -D feature-delete-test\n</code></pre></br>\n\n<p>Recover the lost commit.</p>\n<pre><code class=\"hljs language-bash\">git reflog -3\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">562f958 (HEAD -&gt; main) HEAD@{0}: checkout: moving from feature-delete-test to main\n058f2b5 HEAD@{1}: commit: some commit message\n562f958 (HEAD -&gt; main) HEAD@{2}: checkout: moving from main to feature-delete-test\n</code></pre></br>\n\n<p>Copy the hash of the commit, in this case <code>058f2b5</code>.</p>\n<p>Create a new branch and recover the commit. Creating a new branch is purely for keeping the changes in a branch.</p>\n<pre><code class=\"hljs language-bash\">git checkout -b feature-delete-test\ngit merge 058f2b5\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">Updating 562f958..058f2b5\nFast-forward\n tester.md | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 tester.md\n</code></pre></br>\n\n<p>Check the log to see that the commit is back.</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span>\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">commit 058f2b5e13773f4e6aca1fa4ebe412ddab64ea5a (HEAD -&gt; feature-delete-test)\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Tue Sep 24 00:04:13 2024 +0200\n\n    some commit message\n\ncommit 562f95864c377acd831d1027eeba98fa86875d6d (main)\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Mon Sep 23 18:54:56 2024 +0200\n\n    Y\n\ncommit 37fb15232e7b8cc90d9f7e7470d95331936956e5\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Mon Sep 23 18:54:37 2024 +0200\n\n    X\n\ncommit 1fef21501625d1cb1ab99318ad0fa8487d6ef5cb\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Fri Sep 20 22:27:19 2024 +0200\n\n    E\n\ncommit 8ae69da5d2938a5fee06207f2c3320a4c5b90a9b\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Fri Sep 20 22:27:06 2024 +0200\n\n    D\n\ncommit 16b8f7f933c4c92b83ebb8602109c84c2d799359\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>This may land us a lot of diffs, which may not be desirable if there are a lot of changes between where we are in the branch and the commit hash we are trying to bring back.</p>\n<p>There is an even better way—cherry-pick the commit hash.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<pre><code class=\"hljs language-bash\">git cherry-pick &lt;commit-hash&gt;\n</code></pre><p>Know that the command exists, but we will not go into it further in this course.</p>\n</br>\n</br>\n","markdown":"\n## HEAD\n\nBy now you might have noticed that it says `HEAD` several places in the logs.\n\nCan you guess what it means...?\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Check out `HEAD` in the `.git` directory\n\n(not git checkout—just check it out as in: look at it)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Check out `HEAD` in the `.git` directory\n\n`HEAD` is a reference to the current commit you have checked out. It is a pointer to the branch you are currently on.\n\nWe should see something like this.\n\n```bash\ncat .git/HEAD\n```\n\n**Output:**\n\n```plaintext\nref: refs/heads/main\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nAnd additionally, we can see the contents of the file `refs/heads/main`.\n\n```bash\ncat .git/refs/heads/main\n```\n\n**Output:**\n\n```plaintext\n562f95864c377acd831d1027eeba98fa86875d6d\n```\n\nSo, literally just a reference to the commit hash you are on.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Reflog\n\nThis is a bit of a cool command.\n\nIt shows a log of changes to `HEAD`. So—where `HEAD` has been pointing to.\n\n```bash\ngit reflog\n```\n\n</br>\n\n(try it out now)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n**Output:**\n\n```plaintext\n562f958 (HEAD -> main) HEAD@{0}: checkout: moving from feature to main\n312c2e9 (feature) HEAD@{1}: checkout: moving from feature-rebase-main to feature\n109ad4e (feature-rebase-main) HEAD@{2}: checkout: moving from main to feature-rebase-main\n562f958 (HEAD -> main) HEAD@{3}: checkout: moving from feature-rebase-main to main\n109ad4e (feature-rebase-main) HEAD@{4}: rebase (finish): returning to refs/heads/feature-rebase-main\n109ad4e (feature-rebase-main) HEAD@{5}: rebase (pick): C\nb12a712 HEAD@{6}: rebase (pick): B\n562f958 (HEAD -> main) HEAD@{7}: rebase (start): checkout main\n312c2e9 (feature) HEAD@{8}: checkout: moving from feature to feature-rebase-main\n312c2e9 (feature) HEAD@{9}: checkout: moving from main to feature\n562f958 (HEAD -> main) HEAD@{10}: merge feature-two: Fast-forward\n1fef215 HEAD@{11}: checkout: moving from feature-two to main\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n> **Question:** What do you think is stored in the `.git/logs` directory?\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nYou can limit search like this.\n\n```bash\ngit reflog -3  # shows the last 3 entries\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Recovering lost commits\n\nIf you accidentally delete a branch, you can recover it by checking out the commit hash from the reflog.\n\n```bash\ngit reflog \n# find the commit hash\ngit merge <commit-hash>\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Recover a lost commit\n\n> * Create a new branch `feature-delete-test` based on `main`.\n> * Checkout `feature-delete-test`.\n> * Add a new file with some content (important).\n> * Commit the changes.\n> * Switch back to `main`.\n> * Delete the branch `feature-delete-test`.\n> * Try to recover the branch using the reflog and merge.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Recover a lost commit\n\nCreate the branch and the change and commit it.\n\n```bash\ngit checkout main\ngit checkout -b feature-delete-test\necho \"some text\" >> tester.md\ngit add .\ngit commit -m \"some commit message\"\n```\n\n**Output:**\n\n```plaintext\n[feature-delete-test 058f2b5] some commit message\n 1 file changed, 1 insertion(+)\n create mode 100644 tester.md\n```\n\n</br>\n\nDelete the branch.\n\n```bash\ngit checkout main\ngit branch -D feature-delete-test\n```\n\n</br>\n\nRecover the lost commit.\n\n```bash\ngit reflog -3\n```\n\n**Output:**\n\n```plaintext\n562f958 (HEAD -> main) HEAD@{0}: checkout: moving from feature-delete-test to main\n058f2b5 HEAD@{1}: commit: some commit message\n562f958 (HEAD -> main) HEAD@{2}: checkout: moving from main to feature-delete-test\n```\n\n</br>\n\nCopy the hash of the commit, in this case `058f2b5`.\n\nCreate a new branch and recover the commit. Creating a new branch is purely for keeping the changes in a branch.\n\n```bash\ngit checkout -b feature-delete-test\ngit merge 058f2b5\n```\n\n**Output:**\n\n```plaintext\nUpdating 562f958..058f2b5\nFast-forward\n tester.md | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 tester.md\n```\n\n</br>\n\nCheck the log to see that the commit is back.\n\n```bash\ngit log\n```\n\n**Output:**\n\n```plaintext\ncommit 058f2b5e13773f4e6aca1fa4ebe412ddab64ea5a (HEAD -> feature-delete-test)\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Tue Sep 24 00:04:13 2024 +0200\n\n    some commit message\n\ncommit 562f95864c377acd831d1027eeba98fa86875d6d (main)\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Mon Sep 23 18:54:56 2024 +0200\n\n    Y\n\ncommit 37fb15232e7b8cc90d9f7e7470d95331936956e5\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Mon Sep 23 18:54:37 2024 +0200\n\n    X\n\ncommit 1fef21501625d1cb1ab99318ad0fa8487d6ef5cb\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Fri Sep 20 22:27:19 2024 +0200\n\n    E\n\ncommit 8ae69da5d2938a5fee06207f2c3320a4c5b90a9b\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Fri Sep 20 22:27:06 2024 +0200\n\n    D\n\ncommit 16b8f7f933c4c92b83ebb8602109c84c2d799359\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThis may land us a lot of diffs, which may not be desirable if there are a lot of changes between where we are in the branch and the commit hash we are trying to bring back.\n\nThere is an even better way—cherry-pick the commit hash.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n```bash\ngit cherry-pick <commit-hash>\n```\n\nKnow that the command exists, but we will not go into it further in this course.\n\n</br>\n</br>\n","slug":"head-and-reflog","title":"HEAD and reflog","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/G-head-and-reflog.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/remote-and-fetch","prevSlug":"/itu-bds-sdse/lessons/git-basics/merging"}},"__N_SSG":true}