{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Pull","keywords":["Software engineering","Git"]},"html":"<h2>Pull</h2>\n<p>When fetching we keep the local repository&#39;s remotes updated. Fetching does, as we have seen, not alter the local repository state.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>We can use the <code>git pull</code> command to fetch and merge changes from the remote repository.</p>\n<p>This is the same as running <code>git fetch</code> followed by <code>git merge</code> as we just did before.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Add a change in the remote repository and pull it</h3>\n<blockquote>\n<ul>\n<li>Navigate to the <code>learn-git</code> repository.</li>\n<li>Make sure you are on the <code>main</code> branch.</li>\n<li>Append some text, e.g. <code>A remote change</code>, to the <code>README.md</code> file in the remote repository.</li>\n<li>Commit the change.</li>\n<li>Navigate to the <code>remote-git</code> repository.</li>\n<li>Pull the changes from the remote repository.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Add a change in the remote repository and pull it</h3>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-comment\"># navigate to the &quot;learn-git&quot; repository</span>\ngit checkout main\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;A remote change&quot;</span> &gt;&gt; README.md\ngit add README.md\ngit commit -m <span class=\"hljs-string\">&quot;remote change&quot;</span>\n\n<span class=\"hljs-comment\"># navigate to the &quot;remote-git&quot; repository</span>\ngit pull\n</code></pre></br>\n\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">remote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 327 bytes | 327.00 KiB/s, done.\nFrom ../learn-git\n   058f2b5..d8df0e5  feature-delete-test -&gt; origin/feature-delete-test\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull &lt;remote&gt; &lt;branch&gt;\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/&lt;branch&gt; main\n</code></pre></br>\n\n<p>We got an error. Why?</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>This is because we have not set up a tracking branch.</p>\n<p>We can do this by running the command:</p>\n<pre><code class=\"hljs language-bash\">git branch --set-upstream-to=origin/main main\n</code></pre></br>\n\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">Branch &#x27;main&#x27; set up to track remote branch &#x27;main&#x27; from &#x27;origin&#x27;.\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>If we run <code>git pull</code> again, we will see that the changes are pulled from the remote repository.</p>\n</br>\n\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">remote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 297 bytes | 148.00 KiB/s, done.\nFrom ../learn-git\n   1bfa0c5..7142285  main       -&gt; origin/main\nUpdating 1bfa0c5..7142285\nFast-forward\n README.md | 1 +\n 1 file changed, 1 insertion(+)\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Pull with rebase</h2>\n<p>We can also use the <code>--rebase</code> flag with the <code>git pull</code> command.</p>\n<p>This will rebase the local changes on top of the remote changes. Again, useful for keeping a clean history. The software developers on your team will love this.</p>\n</br>\n\n<pre><code class=\"hljs language-bash\">git pull --rebase\n</code></pre></br>\n</br>\n","markdown":"\n## Pull\n\nWhen fetching we keep the local repository's remotes updated. Fetching does, as we have seen, not alter the local repository state.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nWe can use the `git pull` command to fetch and merge changes from the remote repository.\n\nThis is the same as running `git fetch` followed by `git merge` as we just did before.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Add a change in the remote repository and pull it\n\n> * Navigate to the `learn-git` repository.\n> * Make sure you are on the `main` branch.\n> * Append some text, e.g. `A remote change`, to the `README.md` file in the remote repository.\n> * Commit the change.\n> * Navigate to the `remote-git` repository.\n> * Pull the changes from the remote repository.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Add a change in the remote repository and pull it\n\n```bash\n# navigate to the \"learn-git\" repository\ngit checkout main\necho \"A remote change\" >> README.md\ngit add README.md\ngit commit -m \"remote change\"\n\n# navigate to the \"remote-git\" repository\ngit pull\n```\n\n</br>\n\n**Output:**\n\n```plaintext\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 327 bytes | 327.00 KiB/s, done.\nFrom ../learn-git\n   058f2b5..d8df0e5  feature-delete-test -> origin/feature-delete-test\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull <remote> <branch>\n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/<branch> main\n```\n\n</br>\n\nWe got an error. Why?\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThis is because we have not set up a tracking branch.\n\nWe can do this by running the command:\n\n```bash\ngit branch --set-upstream-to=origin/main main\n```\n\n</br>\n\n**Output:**\n\n```plaintext\nBranch 'main' set up to track remote branch 'main' from 'origin'.\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nIf we run `git pull` again, we will see that the changes are pulled from the remote repository.\n\n</br>\n\n**Output:**\n\n```plaintext\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\nUnpacking objects: 100% (3/3), 297 bytes | 148.00 KiB/s, done.\nFrom ../learn-git\n   1bfa0c5..7142285  main       -> origin/main\nUpdating 1bfa0c5..7142285\nFast-forward\n README.md | 1 +\n 1 file changed, 1 insertion(+)\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Pull with rebase\n\nWe can also use the `--rebase` flag with the `git pull` command.\n\nThis will rebase the local changes on top of the remote changes. Again, useful for keeping a clean history. The software developers on your team will love this.\n\n</br>\n\n```bash\ngit pull --rebase\n```\n\n</br>\n</br>\n","slug":"pull","title":"Pull","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/I-pull.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/push","prevSlug":"/itu-bds-sdse/lessons/git-basics/remote-and-fetch"}},"__N_SSG":true}