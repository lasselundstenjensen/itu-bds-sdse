{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Semantic commit messages","keywords":["Software engineering","Git"]},"html":"<h2>Semantic commit messages</h2>\n<p>People who work on code and version control it in a repository (e.g. git), often do not think about the importance of writing good commit messages. Especially as the amount of contributors increase—both concurrently and over time as people come and go.</p>\n</br>\n\n<p><img src=\"../../images/lessons/git/commit-messages.png\" alt=\"commit messages\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>It is pretty simple, really</h2>\n<p>We prefix the commit message with a type, and then a description.</p>\n<pre><code class=\"hljs language-plaintext\">feat:     # work related to a feature\ndocs:     # changes to documentation\nfix:      # bug fix\nstyle:    # formatting\nrefactor: # refactoring and reducing technical debt\ntest:     # changes related to tests\nchore:    # changes that are minor, like updating dependencies\nci:       # changes to pipelines, build systems, etc.\n</code></pre></br>\n\n<p>A prefix can also be scoped ( <code>feat(scope): description</code> ), and the description can be multiline.</p>\n<p>And breaking changes can be highlighted with a <code>!</code> after the type/scope, e.g. <code>feat!: description</code>.</p>\n</br>\n\n<blockquote>\n<p>Read more about semantic commit message and conventional commits here: <a href=\"https://www.conventionalcommits.org/en/v1.0.0/\">https://www.conventionalcommits.org/en/v1.0.0/</a></p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>Semantic commit messages is a pattern that can also be applied at the user story level in many backlogs (Scrum/Kanban).</p>\n</br>\n</br>\n","markdown":"\n## Semantic commit messages\n\nPeople who work on code and version control it in a repository (e.g. git), often do not think about the importance of writing good commit messages. Especially as the amount of contributors increase—both concurrently and over time as people come and go.\n\n</br>\n\n![commit messages](../../images/lessons/git/commit-messages.png)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## It is pretty simple, really\n\nWe prefix the commit message with a type, and then a description.\n\n```plaintext\nfeat:     # work related to a feature\ndocs:     # changes to documentation\nfix:      # bug fix\nstyle:    # formatting\nrefactor: # refactoring and reducing technical debt\ntest:     # changes related to tests\nchore:    # changes that are minor, like updating dependencies\nci:       # changes to pipelines, build systems, etc.\n```\n\n</br>\n\nA prefix can also be scoped ( `feat(scope): description` ), and the description can be multiline.\n\nAnd breaking changes can be highlighted with a `!` after the type/scope, e.g. `feat!: description`.\n\n</br>\n\n> Read more about semantic commit message and conventional commits here: https://www.conventionalcommits.org/en/v1.0.0/\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nSemantic commit messages is a pattern that can also be applied at the user story level in many backlogs (Scrum/Kanban).\n\n</br>\n</br>\n","slug":"semantic-commit-messages","title":"Semantic commit messages","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/Q-semantic-commit-messages.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/gitignore","prevSlug":"/itu-bds-sdse/lessons/git-basics/tags"}},"__N_SSG":true}