{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Merging","keywords":["Software engineering","Git"]},"html":"<h2>Merging changes</h2>\n<p>What we have done so far is to create a new <code>feature</code> branch based on <code>main</code>, switch to the <code>feature</code>branch, make some new changes and commit them.</p>\n</br>\n\n<p>Now we want to switch back to the <code>main</code> branch and add some new changes there.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Switch to the <code>main</code> branch and make some changes</h3>\n<blockquote>\n<ul>\n<li>Switch to the <code>main</code> branch.</li>\n<li>Add <code>D</code>and <code>E</code> to the <code>README.md</code> file the same way as we just added <code>B</code> and <code>C</code> to the <code>document.md</code> file.</li>\n</ul>\n</blockquote>\n</br>\n\n<p><strong>Command reminder:</strong></p>\n<pre><code class=\"hljs language-bash\">git switch &lt;branch-name&gt;  <span class=\"hljs-comment\"># to switch to a branch</span>\ngit status                <span class=\"hljs-comment\"># to see the status of the working directory</span>\ngit add &lt;file-name&gt;       <span class=\"hljs-comment\"># to add a file to the staging area</span>\ngit commit -m <span class=\"hljs-string\">&quot;&lt;message&gt;&quot;</span> <span class=\"hljs-comment\"># to commit the changes</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Switch to the <code>main</code> branch and make some changes</h3>\n<pre><code class=\"hljs language-bash\">git switch main\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;D&quot;</span> &gt;&gt; README.md\ngit add README.md\ngit commit -m <span class=\"hljs-string\">&quot;D&quot;</span>\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;E&quot;</span> &gt;&gt; README.md\ngit add README.md\ngit commit -m <span class=\"hljs-string\">&quot;E&quot;</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>If we run <code>git log</code> we should see something like this:</p>\n<pre><code class=\"hljs language-plaintext\">commit 1fef21501625d1cb1ab99318ad0fa8487d6ef5cb (HEAD -&gt; main)\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Fri Sep 20 22:27:19 2024 +0200\n\n    E\n\ncommit 8ae69da5d2938a5fee06207f2c3320a4c5b90a9b\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Fri Sep 20 22:27:06 2024 +0200\n\n    D\n\ncommit 16b8f7f933c4c92b83ebb8602109c84c2d799359\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Fri Sep 20 21:48:09 2024 +0200\n\n    A\n</code></pre></br>\n\n<p>We can see that <code>D</code>, <code>E</code>, and <code>A</code> are all on the <code>main</code> branch.</p>\n<p>The branches now look like this:</p>\n<p><img src=\"../../images/lessons/git/branch-a-b-c-d-e.svg\" alt=\"Branch feature\"></p>\n</br>\n\n<p>This means the <em>branches have diverged</em>.</p>\n<p>They have commits that are unique in both and they have a common ancestor <code>A</code>.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Git merge</h2>\n<p>When we have two branches that have diverged, we can merge them back together.</p>\n</br>\n</br>\n\n<p>When merging we can have two different outcomes—one with a merge commit and one without. Strategy for merging matters here.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>What is a merge exactly?</h3>\n<p>A merge is a way to combine the changes from one branch into another branch. Essentially combining two histories together that have diverged somewhere in the past.</p>\n<p>As in our example, where <code>main</code> and <code>feature</code> have diverged from a shared commit <code>A</code>. Here <code>A</code> is the <em><strong>first</strong> common ancestor</em>. This is also called the <strong>merge base</strong>.</p>\n</br>\n\n<p>When we merge, <strong>git</strong> </p>\n<ul>\n<li>walks the history of the two branches,</li>\n<li>finds the merge base, </li>\n<li>checks out the merge base</li>\n<li>and <em>&quot;plays&quot; those commits</em> on top of it,</li>\n<li>and then creates a new commit with the changes from both branches called the <em><strong>merge commit</strong></em>.</li>\n</ul>\n<p>A <em>merge commit</em> has <em>two parents</em>. One from the branch we are merging from and one from the branch we are merging to.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Merge</h2>\n<p>We have the <code>merge</code> command.</p>\n</br>\n\n<p>The branch we are on (i.e. has checked out, with the <code>*</code>) is the branch we are merging into, also called the <code>target</code> branch. The branch in <code>&lt;branch-name&gt;</code> will be the <code>source</code> branch.</p>\n</br>\n</br>\n\n<p><strong>Command</strong></p>\n<pre><code class=\"hljs language-bash\">git merge &lt;branch-name&gt;\n</code></pre><blockquote>\n<p>Read more about it in the manual: <code>man git-merge</code></p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>To merge the <code>feature</code> branch into the <code>main</code> branch, we can use the <code>merge</code> command.</p>\n<p>However, since we will be using this to demonstrate another merge technique, let us first checkout a copy of the <code>main</code> branch, so we do not mess up our history.</p>\n<p>We call it <code>main-merge-feature</code>.</p>\n</br>\n\n<pre><code class=\"hljs language-bash\">git checkout -b main-merge-feature\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Merge the <code>feature</code> branch into the <code>main-merge-feature</code> branch using the <code>merge</code> command</h3>\n<blockquote>\n<ul>\n<li>Switch to the <code>main-merge-feature</code> branch, if you are not already on it.</li>\n<li>Merge the <code>feature</code> branch into the <code>main-merge-feature</code> branch.</li>\n<li>Check the log to see the result.</li>\n<li>(Extra) Use the <code>--parents</code> flag to see the parents of the merge commit.</li>\n</ul>\n</blockquote>\n<p><strong>Command reminder:</strong></p>\n<pre><code class=\"hljs language-bash\">git switch &lt;branch-name&gt;  <span class=\"hljs-comment\"># to switch to a branch</span>\ngit merge &lt;branch-name&gt;   <span class=\"hljs-comment\"># to merge a branch into the current branch</span>\ngit <span class=\"hljs-built_in\">log</span>                   <span class=\"hljs-comment\"># to see the logs</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Merge the <code>feature</code> branch into the <code>main-merge-feature</code> branch using the <code>merge</code> command</h3>\n<pre><code class=\"hljs language-bash\">git switch main-merge-feature <span class=\"hljs-comment\"># switch to the target branch</span>\ngit merge feature             <span class=\"hljs-comment\"># merge source branch into the target branch</span>\n</code></pre></br>\n\n<p>We will be presented with this message.</p>\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">Merge branch &#x27;feature&#x27; into main-merge-feature\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with &#x27;#&#x27; will be ignored, and an empty message aborts\n# the commit.\n</code></pre><p>This is the default message when merging. We can just save and close the editor by typing <code>:wq</code> and pressing <code>Enter</code>.</p>\n<blockquote>\n<p><strong>Note:</strong> <code>:wq</code> is the command (:) to <strong>write</strong> (w) and <strong>quit</strong> (q) in <em>vim</em>—usually the default editor in <em>git</em>.</p>\n</blockquote>\n</br>\n\n<p>We should see something like this.</p>\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">Merge made by the &#x27;ort&#x27; strategy.\n document.md | 2 ++\n 1 file changed, 2 insertions(+)\n create mode 100644 document.md\n</code></pre></br>\n\n<p>Next, we can check the log to see the result.</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span> --oneline --graph --all\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">*   8d3108b (HEAD -&gt; main-merge-feature) Merge branch &#x27;feature&#x27; into main-merge-feature\n|\\\n| * 312c2e9 (feature) C\n| * a582ce0 B\n* | 1fef215 (main) E\n* | 8ae69da D\n|/\n* 16b8f7f A\n</code></pre></br>\n\n<p>We can see that the <code>main-merge-feature</code> branch now has the commits from both <code>main</code> and <code>feature</code>. The branches have been merged together.</p>\n</br>\n\n<h3>Extra: Using the <code>--parents</code> flag</h3>\n<p>Taking a look at the log with the <code>--parents</code> flag, we can see the parents of all the commits.</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span> --oneline --graph --all --parents\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">*   8d3108b 1fef215 312c2e9 (HEAD -&gt; main-merge-feature) Merge branch &#x27;feature&#x27; into main-merge-feature\n|\\\n| * 312c2e9 a582ce0 (feature) C\n| * a582ce0 16b8f7f B\n* | 1fef215 8ae69da (main) E\n* | 8ae69da 16b8f7f D\n|/\n* 16b8f7f A\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Fast forward merges</h2>\n<p>When we have a branch that has diverged from another branch, but the branch we are merging into has not changed since the divergence, we can do a <strong>fast forward merge</strong>.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Merging a branch into another branch using a fast forward merge</h3>\n<blockquote>\n<ul>\n<li>Switch to the <code>main</code> branch.</li>\n<li>Create a new branch <code>feature-two</code> and switch to it.</li>\n<li>Create a new document <code>document-two.md</code>.</li>\n<li>Add values <code>X</code> and <code>Y</code> to the <code>document-two.md</code>.</li>\n<li>Add two commits with messages <code>X</code> and <code>Y</code>.</li>\n<li>Merge the <code>feature-two</code> branch into the <code>main</code> branch.</li>\n</ul>\n</blockquote>\n</br>\n\n<p>The branch structure should look like this.</p>\n<p><img src=\"../../images/lessons/git/branch-x-y.svg\" alt=\"Branch feature-two\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Merging a branch into another branch using a fast forward merge</h3>\n<pre><code class=\"hljs language-bash\">git switch main             <span class=\"hljs-comment\"># switch to the main branch</span>\ngit checkout -b feature-two <span class=\"hljs-comment\"># create and switch to the feature-two branch</span>\n\n<span class=\"hljs-comment\"># add X change</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;X&quot;</span> &gt;&gt; document-two.md\ngit add document-two.md\ngit commit -m <span class=\"hljs-string\">&quot;X&quot;</span>\n\n<span class=\"hljs-comment\"># add Y change</span>\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Y&quot;</span> &gt;&gt; document-two.md\ngit add document-two.md\ngit commit -m <span class=\"hljs-string\">&quot;Y&quot;</span>\n\ngit switch main             <span class=\"hljs-comment\"># switch back to the main branch</span>\ngit merge feature-two       <span class=\"hljs-comment\"># merge the feature-two branch into the main branch</span>\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">Updating 1fef215..562f958\nFast-forward\n document-two.md | 2 ++\n 1 file changed, 2 insertions(+)\n create mode 100644 document-two.md\n</code></pre></br>\n\n<h3>Observation</h3>\n<p>The fast-forward merge happened because the <em><strong>common ancestor</strong></em> of the <code>main</code> and <code>feature-two</code> branches was the <em><strong>tip</strong></em> of the <code>main</code> branch itself.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<blockquote>\n<p><strong>Cleanup</strong></p>\n<p>If you followed the exercises up unti now, you can delete the <code>merge-feature-two</code> and the <code>feature-two</code> branches.</p>\n<p>Use <code>git branch -d &lt;branch-name&gt;</code> to delete a branch.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Git rebase</h2>\n<p>Assume we look at the git history and we have the following branches: <code>main</code> and <code>feature</code>.</p>\n<p>They should look like this.</p>\n<p><img src=\"../../images/lessons/git/branch-a-b-c-d-e-x-y.svg\" alt=\"Branch feature\"></p>\n</br>\n</br>\n\n<p>By rebasing, we can make the history look like this.</p>\n<p><img src=\"../../images/lessons/git/branch-a-d-e-x-y-b-c.svg\" alt=\"Branch feature\"></p>\n</br>\n</br>\n\n<p>Rebasing is the act of taking the changes from one branch and apply them on top of another branch. Or to the tip, really.</p>\n<p>Essentially &quot;rewriting&quot; git history.</p>\n<p>This can be useful if we want to keep a clean history, without merge commits. It allows us to apply our changes on top of the latest &quot;reality&quot;.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>How rebase works</h2>\n<p>Basically, when rebasing this is the flow.</p>\n<ol>\n<li>Execute <code>git rebase &lt;target-branch&gt;</code>. The branch you are on when running the command is the branch you are rebasing—we call it <code>&lt;current-branch&gt;</code>.</li>\n<li>The <code>&lt;target-branch&gt;</code> is checked out.</li>\n<li>The commits from <code>&lt;current-branch&gt;</code> are &quot;played&quot; one commit at a time.</li>\n<li>When done, the <code>&lt;current-branch&gt;</code> is updated to the latest commit SHA of <code>&lt;target-branch&gt;</code> which now has all the changes from <code>&lt;target-branch&gt;</code> as the base.</li>\n</ol>\n</br>\n\n<blockquote>\n<p><strong>Important</strong></p>\n<p>It will lead to complications at some point if you do not understand this flow and what goes on.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Rebase the <code>feature</code> branch with the <code>main</code> branch</h3>\n<p>In order to not mess up the history for other exercises, we will create a new branch <code>feature-rebase-main</code> and rebase that branch with the <code>main</code> branch.</p>\n<p>Do this first.</p>\n<pre><code class=\"hljs language-bash\">git checkout feature\ngit checkout -b feature-rebase-main\n</code></pre></br>\n\n<blockquote>\n<ul>\n<li>Switch to the <code>feature-rebase-main</code> branch.</li>\n<li>Rebase the <code>feature-rebase-main</code> branch with the <code>main</code> branch.</li>\n<li>Check the logs to see the result.</li>\n</ul>\n</blockquote>\n</br>\n\n<p><strong>Command reminder:</strong></p>\n<pre><code class=\"hljs language-bash\">git rebase &lt;target-branch&gt;  <span class=\"hljs-comment\"># to rebase a branch with the current branch</span>\ngit <span class=\"hljs-built_in\">log</span>                     <span class=\"hljs-comment\"># to see the logs</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Rebase the <code>feature</code> branch with the <code>main</code> branch</h3>\n<pre><code class=\"hljs language-bash\">git checkout feature-rebase-main  <span class=\"hljs-comment\"># switch to the current branch</span>\ngit rebase main  <span class=\"hljs-comment\"># rebase the current branch with the target branch</span>\n</code></pre><p>Check the logs to see the result.</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span> --oneline --graph --parents\n</code></pre></br>\n\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">* 109ad4e b12a712 (HEAD -&gt; feature-rebase-main) C\n* b12a712 562f958 B\n* 562f958 37fb152 (main) Y\n* 37fb152 1fef215 X\n* 1fef215 8ae69da E\n* 8ae69da 16b8f7f D\n* 16b8f7f A\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Observation</h3>\n<p>Rebase rewrites the history of the current branch with the missing commits from the target branch. When this is done, rebase actually creates <em><strong>new</strong></em> commits with the same changes, which is why you will see different commit SHAs.</p>\n</br>\n\n<blockquote>\n<p>Read more about merging vs. rebasing. Especially the section &quot;The golden rule of rebasing&quot;:</p>\n<p><a href=\"https://www.atlassian.com/git/tutorials/merging-vs-rebasing\">https://www.atlassian.com/git/tutorials/merging-vs-rebasing</a></p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Pros</h3>\n<ul>\n<li>Clean history, no merge commits.</li>\n</ul>\n<h3>Cons</h3>\n<ul>\n<li>Alters history of a branch. Rewriting history can be dangerous.</li>\n<li>If a branch was already on the remote, we need to force push the changes. This can lead to complications if others are working on the same branch.</li>\n</ul>\n<h3>Warning</h3>\n<ul>\n<li><strong>Never</strong> rebase a branch that is shared with others.</li>\n<li><strong>NEVER CHANGE HISTORY OF A PUBLIC BRANCH</strong>—Meaning, do not change the history of <code>main</code> or whatever branch you are using as the main branch.</li>\n<li>You will end up with two branches with the same name, but with different histories, which <em>will</em> lead to merge conflicts and team frustations. <strong>The moment you do this, it breaks everybody.</strong></li>\n</ul>\n<h2>Rule of thumb here</h2>\n<ul>\n<li>Always <em><strong>merge</strong></em> on <em>public</em> branches.</li>\n<li>Only <em><strong>rebase</strong></em> on <em>private</em> branches.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>There is a lot more to learn here, but for the scope of this course, this is enough.</p>\n</br>\n</br>\n","markdown":"\n## Merging changes\n\nWhat we have done so far is to create a new `feature` branch based on `main`, switch to the `feature`branch, make some new changes and commit them.\n\n</br>\n\nNow we want to switch back to the `main` branch and add some new changes there.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Switch to the `main` branch and make some changes\n\n> * Switch to the `main` branch.\n> * Add `D`and `E` to the `README.md` file the same way as we just added `B` and `C` to the `document.md` file.\n\n</br>\n\n**Command reminder:**\n\n```bash\ngit switch <branch-name>  # to switch to a branch\ngit status                # to see the status of the working directory\ngit add <file-name>       # to add a file to the staging area\ngit commit -m \"<message>\" # to commit the changes\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Switch to the `main` branch and make some changes\n\n```bash\ngit switch main\n\necho \"D\" >> README.md\ngit add README.md\ngit commit -m \"D\"\n\necho \"E\" >> README.md\ngit add README.md\ngit commit -m \"E\"\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nIf we run `git log` we should see something like this:\n\n```plaintext\ncommit 1fef21501625d1cb1ab99318ad0fa8487d6ef5cb (HEAD -> main)\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Fri Sep 20 22:27:19 2024 +0200\n\n    E\n\ncommit 8ae69da5d2938a5fee06207f2c3320a4c5b90a9b\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Fri Sep 20 22:27:06 2024 +0200\n\n    D\n\ncommit 16b8f7f933c4c92b83ebb8602109c84c2d799359\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Fri Sep 20 21:48:09 2024 +0200\n\n    A\n```\n\n</br>\n\nWe can see that `D`, `E`, and `A` are all on the `main` branch.\n\nThe branches now look like this:\n\n![Branch feature](../../images/lessons/git/branch-a-b-c-d-e.svg)\n\n</br>\n\nThis means the _branches have diverged_.\n\nThey have commits that are unique in both and they have a common ancestor `A`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Git merge\n\nWhen we have two branches that have diverged, we can merge them back together.\n\n</br>\n</br>\n\nWhen merging we can have two different outcomes—one with a merge commit and one without. Strategy for merging matters here.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### What is a merge exactly?\n\nA merge is a way to combine the changes from one branch into another branch. Essentially combining two histories together that have diverged somewhere in the past.\n\nAs in our example, where `main` and `feature` have diverged from a shared commit `A`. Here `A` is the ***first** common ancestor*. This is also called the **merge base**.\n\n</br>\n\nWhen we merge, **git** \n- walks the history of the two branches,\n- finds the merge base, \n- checks out the merge base\n- and *\"plays\" those commits* on top of it,\n- and then creates a new commit with the changes from both branches called the ***merge commit***.\n\nA *merge commit* has *two parents*. One from the branch we are merging from and one from the branch we are merging to.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Merge\n\nWe have the `merge` command.\n\n</br>\n\nThe branch we are on (i.e. has checked out, with the `*`) is the branch we are merging into, also called the `target` branch. The branch in `<branch-name>` will be the `source` branch.\n\n</br>\n</br>\n\n**Command**\n\n```bash\ngit merge <branch-name>\n```\n\n> Read more about it in the manual: `man git-merge`\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nTo merge the `feature` branch into the `main` branch, we can use the `merge` command.\n\nHowever, since we will be using this to demonstrate another merge technique, let us first checkout a copy of the `main` branch, so we do not mess up our history.\n\nWe call it `main-merge-feature`.\n\n</br>\n\n```bash\ngit checkout -b main-merge-feature\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Merge the `feature` branch into the `main-merge-feature` branch using the `merge` command\n\n> * Switch to the `main-merge-feature` branch, if you are not already on it.\n> * Merge the `feature` branch into the `main-merge-feature` branch.\n> * Check the log to see the result.\n> * (Extra) Use the `--parents` flag to see the parents of the merge commit.\n\n**Command reminder:**\n\n```bash\ngit switch <branch-name>  # to switch to a branch\ngit merge <branch-name>   # to merge a branch into the current branch\ngit log                   # to see the logs\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Merge the `feature` branch into the `main-merge-feature` branch using the `merge` command\n\n```bash\ngit switch main-merge-feature # switch to the target branch\ngit merge feature             # merge source branch into the target branch\n```\n\n</br>\n\nWe will be presented with this message.\n\n**Output:**\n\n```plaintext\nMerge branch 'feature' into main-merge-feature\n# Please enter a commit message to explain why this merge is necessary,\n# especially if it merges an updated upstream into a topic branch.\n#\n# Lines starting with '#' will be ignored, and an empty message aborts\n# the commit.\n```\n\nThis is the default message when merging. We can just save and close the editor by typing `:wq` and pressing `Enter`.\n\n> **Note:** `:wq` is the command (:) to **write** (w) and **quit** (q) in *vim*—usually the default editor in *git*.\n\n</br>\n\nWe should see something like this.\n\n**Output:**\n\n```plaintext\nMerge made by the 'ort' strategy.\n document.md | 2 ++\n 1 file changed, 2 insertions(+)\n create mode 100644 document.md\n```\n\n</br>\n\nNext, we can check the log to see the result.\n\n```bash\ngit log --oneline --graph --all\n```\n\n**Output:**\n\n```plaintext\n*   8d3108b (HEAD -> main-merge-feature) Merge branch 'feature' into main-merge-feature\n|\\\n| * 312c2e9 (feature) C\n| * a582ce0 B\n* | 1fef215 (main) E\n* | 8ae69da D\n|/\n* 16b8f7f A\n```\n\n</br>\n\nWe can see that the `main-merge-feature` branch now has the commits from both `main` and `feature`. The branches have been merged together.\n\n</br>\n\n### Extra: Using the `--parents` flag\n\nTaking a look at the log with the `--parents` flag, we can see the parents of all the commits.\n\n```bash\ngit log --oneline --graph --all --parents\n```\n\n**Output:**\n\n```plaintext\n*   8d3108b 1fef215 312c2e9 (HEAD -> main-merge-feature) Merge branch 'feature' into main-merge-feature\n|\\\n| * 312c2e9 a582ce0 (feature) C\n| * a582ce0 16b8f7f B\n* | 1fef215 8ae69da (main) E\n* | 8ae69da 16b8f7f D\n|/\n* 16b8f7f A\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Fast forward merges\n\nWhen we have a branch that has diverged from another branch, but the branch we are merging into has not changed since the divergence, we can do a **fast forward merge**.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Merging a branch into another branch using a fast forward merge\n\n> * Switch to the `main` branch.\n> * Create a new branch `feature-two` and switch to it.\n> * Create a new document `document-two.md`.\n> * Add values `X` and `Y` to the `document-two.md`.\n> * Add two commits with messages `X` and `Y`.\n> * Merge the `feature-two` branch into the `main` branch.\n\n</br>\n\nThe branch structure should look like this.\n\n![Branch feature-two](../../images/lessons/git/branch-x-y.svg)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Merging a branch into another branch using a fast forward merge\n\n```bash\ngit switch main             # switch to the main branch\ngit checkout -b feature-two # create and switch to the feature-two branch\n\n# add X change\necho \"X\" >> document-two.md\ngit add document-two.md\ngit commit -m \"X\"\n\n# add Y change\necho \"Y\" >> document-two.md\ngit add document-two.md\ngit commit -m \"Y\"\n\ngit switch main             # switch back to the main branch\ngit merge feature-two       # merge the feature-two branch into the main branch\n```\n\n**Output:**\n\n```plaintext\nUpdating 1fef215..562f958\nFast-forward\n document-two.md | 2 ++\n 1 file changed, 2 insertions(+)\n create mode 100644 document-two.md\n```\n\n</br>\n\n### Observation\n\nThe fast-forward merge happened because the ***common ancestor*** of the `main` and `feature-two` branches was the ***tip*** of the `main` branch itself.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n> **Cleanup**\n> \n> If you followed the exercises up unti now, you can delete the `merge-feature-two` and the `feature-two` branches.\n>\n> Use `git branch -d <branch-name>` to delete a branch.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Git rebase\n\nAssume we look at the git history and we have the following branches: `main` and `feature`.\n\nThey should look like this.\n\n![Branch feature](../../images/lessons/git/branch-a-b-c-d-e-x-y.svg)\n\n</br>\n</br>\n\nBy rebasing, we can make the history look like this.\n\n![Branch feature](../../images/lessons/git/branch-a-d-e-x-y-b-c.svg)\n\n</br>\n</br>\n\nRebasing is the act of taking the changes from one branch and apply them on top of another branch. Or to the tip, really.\n\nEssentially \"rewriting\" git history.\n\nThis can be useful if we want to keep a clean history, without merge commits. It allows us to apply our changes on top of the latest \"reality\".\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## How rebase works\n\nBasically, when rebasing this is the flow.\n\n1. Execute `git rebase <target-branch>`. The branch you are on when running the command is the branch you are rebasing—we call it `<current-branch>`.\n2. The `<target-branch>` is checked out.\n3. The commits from `<current-branch>` are \"played\" one commit at a time.\n4. When done, the `<current-branch>` is updated to the latest commit SHA of `<target-branch>` which now has all the changes from `<target-branch>` as the base.\n\n</br>\n\n> **Important**\n>\n> It will lead to complications at some point if you do not understand this flow and what goes on.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Rebase the `feature` branch with the `main` branch\n\nIn order to not mess up the history for other exercises, we will create a new branch `feature-rebase-main` and rebase that branch with the `main` branch.\n\nDo this first.\n\n```bash\ngit checkout feature\ngit checkout -b feature-rebase-main\n```\n\n</br>\n\n> * Switch to the `feature-rebase-main` branch.\n> * Rebase the `feature-rebase-main` branch with the `main` branch.\n> * Check the logs to see the result.\n\n</br>\n\n**Command reminder:**\n\n```bash\ngit rebase <target-branch>  # to rebase a branch with the current branch\ngit log                     # to see the logs\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Rebase the `feature` branch with the `main` branch\n\n```bash\ngit checkout feature-rebase-main  # switch to the current branch\ngit rebase main  # rebase the current branch with the target branch\n```\n\nCheck the logs to see the result.\n\n```bash\ngit log --oneline --graph --parents\n```\n\n</br>\n\n**Output:**\n\n```plaintext\n* 109ad4e b12a712 (HEAD -> feature-rebase-main) C\n* b12a712 562f958 B\n* 562f958 37fb152 (main) Y\n* 37fb152 1fef215 X\n* 1fef215 8ae69da E\n* 8ae69da 16b8f7f D\n* 16b8f7f A\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Observation\n\nRebase rewrites the history of the current branch with the missing commits from the target branch. When this is done, rebase actually creates ***new*** commits with the same changes, which is why you will see different commit SHAs.\n\n</br>\n\n> Read more about merging vs. rebasing. Especially the section \"The golden rule of rebasing\":\n> \n> [https://www.atlassian.com/git/tutorials/merging-vs-rebasing](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Pros\n\n- Clean history, no merge commits.\n\n### Cons\n\n- Alters history of a branch. Rewriting history can be dangerous.\n- If a branch was already on the remote, we need to force push the changes. This can lead to complications if others are working on the same branch.\n\n### Warning\n\n- **Never** rebase a branch that is shared with others.\n- **NEVER CHANGE HISTORY OF A PUBLIC BRANCH**—Meaning, do not change the history of `main` or whatever branch you are using as the main branch.\n- You will end up with two branches with the same name, but with different histories, which _will_ lead to merge conflicts and team frustations. **The moment you do this, it breaks everybody.**\n\n## Rule of thumb here\n\n- Always ***merge*** on *public* branches.\n- Only ***rebase*** on *private* branches.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThere is a lot more to learn here, but for the scope of this course, this is enough.\n\n</br>\n</br>\n","slug":"merging","title":"Merging","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/F-merging.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/head-and-reflog","prevSlug":"/itu-bds-sdse/lessons/git-basics/branches"}},"__N_SSG":true}