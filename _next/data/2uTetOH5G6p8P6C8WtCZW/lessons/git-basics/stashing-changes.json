{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Stashing changes","keywords":["Software engineering","Git"]},"html":"<h2>Stash</h2>\n<p>Git stash will take all changes tracked by git—i.e. changes to index and change to work tree—and store them into the &quot;stash&quot;. It is a special commit not part of the repository history.</p>\n<p>We can think of stash as a stack of temporary changes. We may use them later. We may not.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><strong>Command</strong></p>\n<pre><code class=\"hljs language-bash\">git stash\n</code></pre></br>\n\n<p>We can provide a message to the stash:</p>\n<pre><code class=\"hljs language-bash\">git stash -m <span class=\"hljs-string\">&quot;a message&quot;</span>\n</code></pre></br>\n\n<p>Stashes can be listed:</p>\n<pre><code class=\"hljs language-bash\">git stash list\ngit stash show\n</code></pre></br>\n\n<p>We can pop the latest stash:</p>\n<pre><code class=\"hljs language-bash\">git stash pop\ngit stash pop --index &lt;index&gt;\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Stashing changes</h3>\n<blockquote>\n<ul>\n<li>In the upstream repository <code>learn-git</code>, add and commit a change to a new file.</li>\n<li>In the downstream repository <code>remote-git</code>, make a change to the <code>README.md</code> file, <em><strong>but do not commit it</strong></em>.</li>\n<li>In this example we pretend we need to put our temporary changes aside, because something came up, and we need to work on something else. So stash the changes.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Stashing changes</h3>\n<p>Navigate to the <code>learn-git</code> repository.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;upstream change&quot;</span> &gt;&gt; upstream.md\ngit add upstream.md\ngit commit -m <span class=\"hljs-string\">&quot;upstream change&quot;</span>\n</code></pre><p>Navigate to the <code>remote-git</code> repository.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;downstream change&quot;</span> &gt;&gt; README.md\n</code></pre><p>Stash the changes:</p>\n<pre><code class=\"hljs language-bash\">git stash\n</code></pre></br>\n\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">Saved working directory and index state WIP on feature: 58dab59 upstream change\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Playing around with stashes</h3>\n<blockquote>\n<ul>\n<li>List the stashes.</li>\n<li>Show the latest stash.</li>\n<li>Pop the latest stash.</li>\n<li>Stash again with a custom message.</li>\n<li>List the stashes again.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Playing around with stashes</h3>\n<pre><code class=\"hljs language-bash\">git stash list\ngit stash show\ngit stash pop\ngit stash -m <span class=\"hljs-string\">&quot;custom changes&quot;</span>\ngit stash list\n</code></pre></br>\n</br>\n","markdown":"\n## Stash\n\nGit stash will take all changes tracked by git—i.e. changes to index and change to work tree—and store them into the \"stash\". It is a special commit not part of the repository history.\n\nWe can think of stash as a stack of temporary changes. We may use them later. We may not.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n**Command**\n\n```bash\ngit stash\n```\n\n</br>\n\nWe can provide a message to the stash:\n\n```bash\ngit stash -m \"a message\"\n```\n\n</br>\n\nStashes can be listed:\n\n```bash\ngit stash list\ngit stash show\n```\n\n</br>\n\nWe can pop the latest stash:\n\n```bash\ngit stash pop\ngit stash pop --index <index>\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Stashing changes\n\n> * In the upstream repository `learn-git`, add and commit a change to a new file.\n> * In the downstream repository `remote-git`, make a change to the `README.md` file, ***but do not commit it***.\n> * In this example we pretend we need to put our temporary changes aside, because something came up, and we need to work on something else. So stash the changes.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Stashing changes\n\nNavigate to the `learn-git` repository.\n\n```bash\necho \"upstream change\" >> upstream.md\ngit add upstream.md\ngit commit -m \"upstream change\"\n```\n\nNavigate to the `remote-git` repository.\n\n```bash\necho \"downstream change\" >> README.md\n```\n\nStash the changes:\n\n```bash\ngit stash\n```\n\n</br>\n\n**Output:**\n\n```plaintext\nSaved working directory and index state WIP on feature: 58dab59 upstream change\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Playing around with stashes\n\n> * List the stashes.\n> * Show the latest stash.\n> * Pop the latest stash.\n> * Stash again with a custom message.\n> * List the stashes again.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Playing around with stashes\n\n```bash\ngit stash list\ngit stash show\ngit stash pop\ngit stash -m \"custom changes\"\ngit stash list\n```\n\n</br>\n</br>\n","slug":"stashing-changes","title":"Stashing changes","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/K-stashing-changes.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/interactive-rebase-and-squashing","prevSlug":"/itu-bds-sdse/lessons/git-basics/push"}},"__N_SSG":true}