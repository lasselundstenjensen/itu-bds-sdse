{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Introduction","keywords":["Software engineering","Git"]},"html":"<h2>Introduction to <i class=\"fab fa-git\"></i></h2>\n<h3>The goal</h3>\n<p>Not all the commands, but enough that you <em>git</em> it.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>But—before we git we man</h2>\n<p>If you are not familiar with <code>man</code>, it is a command-line utility for reading the manual pages (documentation) of the Unix and Unix-like operating systems.</p>\n</br>\n</br>\n\n<p><strong>Try it out:</strong></p>\n<pre><code class=\"hljs language-bash\">man man\n</code></pre><blockquote>\n<p><strong>Hint:</strong> Use <code>q</code> to exit.</p>\n</blockquote>\n</br>\n</br>\n\n<p>We will only cover a fraction of git commands, but you can always read the manual pages for more information. Now you know how.</p>\n<pre><code class=\"hljs language-bash\">man git- <span class=\"hljs-comment\"># Press tab for auto complete (if you are using zsh or similar)</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>What is Git?</h2>\n<p>Git is a distributed version control system (VCS).</p>\n<p>Traditionally VCSs were centralized, which came with some downsides—but Git is distributed. This means that every developer has a full copy of the repository on their local machine.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Commands</h2>\n<p>In Git, commands are divided into high-level (&quot;porcelain&quot;) commands and low-level (&quot;plumbing&quot;) commands.</p>\n<p>We will be using a bit of both.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Some terminology</h2>\n<ul>\n<li><strong>repo</strong>: A project tracked by Git.</li>\n</ul>\n</br>\n\n<ul>\n<li><strong>commit</strong>: A snapshot of the repository in its entirety at a specific point in time.</li>\n</ul>\n<blockquote>\n<p>Represented by a <strong>SHA</strong>, which is a unique identifier generated from the contents of the change, author, time, and more.\n</br>\n</br>\nExample: <code>61ddb117f38022913c17aa069fecc3013b38dd9d</code></p>\n</blockquote>\n</br>\n\n<ul>\n<li><strong>git index</strong>: The Git index is an essential data structure in Git, and it serves as the temporary staging area for changes before committing them to the project history.</li>\n</ul>\n<blockquote>\n<p>When you run <code>git add</code>, you are adding changes to the index. The files from your working directory are hashed and stored as objects in the index, leading them to be &quot;staged changes&quot;.</p>\n<p>More info: <a href=\"https://graphite.dev/guides/git-index\">Git Index</a></p>\n</blockquote>\n</br>\n\n<ul>\n<li><strong>work tree</strong>, <strong>working tree</strong>, <strong>main working tree</strong>: This is the directory and set of files that you are currently working on. The git repo. A working tree is setup by <code>git init</code> or <code>git clone</code>.</li>\n</ul>\n</br>\n\n<ul>\n<li><strong>squash</strong>: Combining multiple commits into one.</li>\n</ul>\n<blockquote>\n<p>A squash would be taking N commits and turning it into 1 commit (most commonly). Great for cleaning up your commit history.</p>\n</blockquote>\n</br>\n\n<ul>\n<li><strong>untracked</strong>, <strong>staged</strong>, and <strong>tracked</strong>: The state of a file in the working tree.</li>\n</ul>\n</br>\n\n<p><img src=\"../../images/lessons/git/untracked-staged-tracked.svg\" alt=\"Git states\"></p>\n</br>\n\n<blockquote>\n<p><strong>untracked</strong>: A file that is not being tracked by Git. These files are easier to accidentally lose work on since Git is not tracking them.</p>\n<p><strong>indexed/staged</strong>: A file that has been added to the index. You must stage before you commit and you stage changes by using the <code>git add</code> command.</p>\n<p><strong>tracked</strong>: A file that is being tracked by Git. This means that Git is aware of the file and its changes and they will be included in the next commit.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Some facts</h2>\n<ul>\n<li>Git is an acyclic graph</li>\n</ul>\n</br>\n\n<ul>\n<li>In git, each commit is a node in the graph, and each node has a parent (except the first commit), and each pointer is a child to parent relationship</li>\n</ul>\n</br>\n\n<ul>\n<li>If <em>untracked</em> files are deleted they are lost forever, <strong>so commit early and often</strong>—you can always change history to turn it into one commit (squashing)</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>For many people their experience with git can be summed up in these 5 commands:</p>\n<ul>\n<li><code>status</code></li>\n<li><code>add</code></li>\n<li><code>commit</code></li>\n<li><code>push</code></li>\n<li><code>pull</code></li>\n</ul>\n</br>\n</br>\n\n<p>Anything beyond that can feel <em>very advanced</em>.</p>\n<p>We will go a bit beyond these.</p>\n<p>For now, we assume you have zero knowledge and experience with <strong>git</strong>. This part of the course is about making you practically comfortable using git for daily work and forming some good habits.</p>\n</br>\n</br>\n","markdown":"\n## Introduction to <i class=\"fab fa-git\"></i>\n\n### The goal\n\nNot all the commands, but enough that you _git_ it.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## But—before we git we man\n\nIf you are not familiar with `man`, it is a command-line utility for reading the manual pages (documentation) of the Unix and Unix-like operating systems.\n\n</br>\n</br>\n\n**Try it out:**\n\n```bash\nman man\n```\n\n> **Hint:** Use `q` to exit.\n\n</br>\n</br>\n\nWe will only cover a fraction of git commands, but you can always read the manual pages for more information. Now you know how.\n\n```bash\nman git- # Press tab for auto complete (if you are using zsh or similar)\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## What is Git?\n\nGit is a distributed version control system (VCS).\n\nTraditionally VCSs were centralized, which came with some downsides—but Git is distributed. This means that every developer has a full copy of the repository on their local machine.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Commands\n\nIn Git, commands are divided into high-level (\"porcelain\") commands and low-level (\"plumbing\") commands.\n\nWe will be using a bit of both.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Some terminology\n\n- **repo**: A project tracked by Git.\n\n</br>\n\n- **commit**: A snapshot of the repository in its entirety at a specific point in time.\n\n> Represented by a **SHA**, which is a unique identifier generated from the contents of the change, author, time, and more.\n> </br>\n> </br>\n> Example: `61ddb117f38022913c17aa069fecc3013b38dd9d`\n\n</br>\n\n- **git index**: The Git index is an essential data structure in Git, and it serves as the temporary staging area for changes before committing them to the project history.\n\n> When you run `git add`, you are adding changes to the index. The files from your working directory are hashed and stored as objects in the index, leading them to be \"staged changes\".\n>\n> More info: [Git Index](https://graphite.dev/guides/git-index)\n\n</br>\n\n- **work tree**, **working tree**, **main working tree**: This is the directory and set of files that you are currently working on. The git repo. A working tree is setup by `git init` or `git clone`.\n\n</br>\n\n- **squash**: Combining multiple commits into one.\n\n> A squash would be taking N commits and turning it into 1 commit (most commonly). Great for cleaning up your commit history.\n\n</br>\n\n- **untracked**, **staged**, and **tracked**: The state of a file in the working tree.\n\n</br>\n\n![Git states](../../images/lessons/git/untracked-staged-tracked.svg)\n\n</br>\n\n> **untracked**: A file that is not being tracked by Git. These files are easier to accidentally lose work on since Git is not tracking them.\n> \n> **indexed/staged**: A file that has been added to the index. You must stage before you commit and you stage changes by using the `git add` command.\n> \n> **tracked**: A file that is being tracked by Git. This means that Git is aware of the file and its changes and they will be included in the next commit.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Some facts\n\n- Git is an acyclic graph\n\n</br>\n\n- In git, each commit is a node in the graph, and each node has a parent (except the first commit), and each pointer is a child to parent relationship\n\n</br>\n\n- If *untracked* files are deleted they are lost forever, **so commit early and often**—you can always change history to turn it into one commit (squashing)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nFor many people their experience with git can be summed up in these 5 commands:\n\n* `status`\n* `add`\n* `commit`\n* `push`\n* `pull`\n\n</br>\n</br>\n\nAnything beyond that can feel _very advanced_.\n\nWe will go a bit beyond these.\n\nFor now, we assume you have zero knowledge and experience with **git**. This part of the course is about making you practically comfortable using git for daily work and forming some good habits.\n\n</br>\n</br>\n","slug":"introduction","title":"Introduction","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/A-introduction.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/git-config","prevSlug":"/itu-bds-sdse/lessons/go-exercises/temperature-converter"}},"__N_SSG":true}