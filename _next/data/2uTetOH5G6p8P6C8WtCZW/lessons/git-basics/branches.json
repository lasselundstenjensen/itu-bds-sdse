{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Branches","keywords":["Software engineering","Git"]},"html":"<h2>Branches</h2>\n<p>Truth is that you are not likely going to be working on the <code>main</code> branch all the time. Especially if working in a team.</p>\n<p>Normally you will branch out from the main line of development to work on a new feature or fix a bug. When you are done, you merge the branch back into the main line.</p>\n</br>\n\n<p>When you see <code>main</code> in the terminal, this <em>also</em> refers to a branch. The main branch.</p>\n</br>\n</br>\n\n<blockquote>\n<p>We will be talking more about branching strategies later, which builds on the foundation covered in this section.</p>\n<p>For now, we focus on the git commands necessary to work with branches.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>Branches are very <em>cheap</em> to create. A branch is essentially a <strong>pointer</strong>.</p>\n<p>There are some performance considerations if you have a repository with a lot of branches, but generally this is only going to be a problem when the volume grows large or the repository itself takes up a lot of storage space.</p>\n</br>\n\n<blockquote>\n<p><strong>Rule of thumb:</strong> When you are done with a branch, delete it.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Create a new repository and initial commit</h3>\n<blockquote>\n<ul>\n<li>Create a new repository <code>learn-git</code>.</li>\n<li>Create a new file <code>README.md</code>.</li>\n<li>Add a line of text to it that says <code>A</code>.</li>\n<li>Commit the file with the message also saying <code>A</code>.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Create a new repository and initial commit</h3>\n<pre><code class=\"hljs language-plaintext\">git log\n\ncommit 0ad5c13d0496e517e66aad45ccf4cc75b09340df (HEAD -&gt; main)\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Wed Sep 18 00:34:58 2024 +0200\n\n    A\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Creating branches</h2>\n<p>Branching is easy and is done with the <code>branch</code> command.</p>\n<pre><code class=\"hljs language-bash\">git branch feature\n</code></pre><p>This creates a new branch called <code>feature</code>.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>What happened?</h3>\n<ul>\n<li>A new branch <code>feature</code> was created pointing to the <strong>same commit</strong> as <code>main</code>.</li>\n<li>We are still on <code>main</code>.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Listing branches</h2>\n<p>We can see this by listing the branches. The command <code>git branch</code> displays all our local branches.</p>\n<pre><code class=\"hljs language-bash\">git branch\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">  feature\n* main\n</code></pre><p>The current working branch is marked with an asterisk <code>*</code>.</p>\n</br>\n</br>\n\n<p>Furthermore, we can see more information when using <code>git log</code>.</p>\n<pre><code class=\"hljs language-bash\">git <span class=\"hljs-built_in\">log</span>\n</code></pre><p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">commit 0ad5c13d0496e517e66aad45ccf4cc75b09340df (HEAD -&gt; main, feature)\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Wed Sep 18 00:34:58 2024 +0200\n\n    A\n</code></pre><p>Specifically, the <code>HEAD -&gt; main, feature</code> part tells us that both <code>main</code> and <code>feature</code> are pointing to the same commit.</p>\n<p><code>HEAD</code> always points to the tip of the branch.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Switching branches</h2>\n<p>To switch to the <code>feature</code> branch, we can use either the <code>checkout</code> or <code>switch</code> command.</p>\n<pre><code class=\"hljs language-bash\">git checkout feature\ngit switch feature\n</code></pre><p><code>checkout</code> is supposedly a more versatile command, but both commands can be used to switch branches. In this context they do the same.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Create a new branch and switch to it</h3>\n<blockquote>\n<ul>\n<li>Create a new branch called <code>feature</code>.</li>\n<li>Switch to the <code>feature</code> branch.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Create a new branch and switch to it</h3>\n<pre><code class=\"hljs language-plaintext\">git branch feature\ngit switch feature # or git checkout feature\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Exercise: Create a document.md file with changes on the <code>feature</code> branch</h3>\n<blockquote>\n<ul>\n<li>Create a new file called <code>document.md</code>.</li>\n<li>Add a line of text to the <code>document.md</code> file that says <code>B</code>.</li>\n<li>Commit the file with the message also saying <code>B</code>.</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>Do it again, except replace <code>B</code> with <code>C</code> in the above.</li>\n</ul>\n</blockquote>\n</br>\n</br>\n\n<p>When done use <code>git log</code> to see the history.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Solution: Create a document.md file with changes on the <code>feature</code> branch</h3>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;B&quot;</span> &gt;&gt; document.md\ngit add document.md\ngit commit -m <span class=\"hljs-string\">&quot;B&quot;</span>\n\n<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;C&quot;</span> &gt;&gt; document.md\ngit add document.md\ngit commit -m <span class=\"hljs-string\">&quot;C&quot;</span>\n</code></pre><blockquote>\n<p><strong>Note:</strong> The <code>&gt;&gt;</code> operator appends text to a file. It also creates the file, if it does not exist. It only works on Unix-like systems.</p>\n</blockquote>\n</br>\n\n<p><strong>Output:</strong></p>\n<pre><code class=\"hljs language-plaintext\">commit 787200cb8e96c3e830a3e5fbb0ec127278655325 (HEAD -&gt; feature)\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Wed Sep 18 01:11:05 2024 +0200\n\n    C\n\ncommit cae02f432e63ec51c87c2a1faf944b602189dc57\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Wed Sep 18 01:10:47 2024 +0200\n\n    B\n\ncommit 0ad5c13d0496e517e66aad45ccf4cc75b09340df (main)\nAuthor: Lasse Lund Sten Jensen &lt;lajl@itu.dk&gt;\nDate:   Wed Sep 18 00:34:58 2024 +0200\n\n    A\n</code></pre></br>\n\n<p>We can see that <code>B</code> and <code>C</code> are on the <code>feature</code> branch, while <code>A</code> is on the <code>main</code> branch.</p>\n</br>\n\n<p>It should look something like this:</p>\n<p><img src=\"../../images/lessons/git/branch-a-b-c.svg\" alt=\"Branch feature\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Deleting branches</h2>\n<p>You can delete branches with the <code>branch</code> command and the options <code>-d</code> and <code>-D</code>.</p>\n<p>Read up on it in the documentation, <code>man git-branch</code>.</p>\n</br>\n\n<pre><code class=\"hljs language-bash\">git branch -d feature\n</code></pre><blockquote>\n<p><strong>Important:</strong> Do <strong>not</strong> delete the branch now!</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>What do we do next?</h2>\n<p>So, we have made some changes on the <code>feature</code> branch and that is a job well done. Amazing code right there...</p>\n<p>What do we do with them?</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>Merge them back into <code>main</code> !</p>\n</br>\n</br>\n","markdown":"\n## Branches\n\nTruth is that you are not likely going to be working on the `main` branch all the time. Especially if working in a team.\n\nNormally you will branch out from the main line of development to work on a new feature or fix a bug. When you are done, you merge the branch back into the main line.\n\n</br>\n\nWhen you see `main` in the terminal, this _also_ refers to a branch. The main branch.\n\n</br>\n</br>\n\n> We will be talking more about branching strategies later, which builds on the foundation covered in this section.\n> \n> For now, we focus on the git commands necessary to work with branches.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nBranches are very _cheap_ to create. A branch is essentially a **pointer**.\n\nThere are some performance considerations if you have a repository with a lot of branches, but generally this is only going to be a problem when the volume grows large or the repository itself takes up a lot of storage space.\n\n</br>\n\n> **Rule of thumb:** When you are done with a branch, delete it.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Create a new repository and initial commit\n\n> * Create a new repository `learn-git`.\n> * Create a new file `README.md`.\n> * Add a line of text to it that says `A`.\n> * Commit the file with the message also saying `A`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Create a new repository and initial commit\n\n```plaintext\ngit log\n\ncommit 0ad5c13d0496e517e66aad45ccf4cc75b09340df (HEAD -> main)\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Wed Sep 18 00:34:58 2024 +0200\n\n    A\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Creating branches\n\nBranching is easy and is done with the `branch` command.\n\n```bash\ngit branch feature\n```\n\nThis creates a new branch called `feature`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### What happened?\n\n- A new branch `feature` was created pointing to the **same commit** as `main`.\n- We are still on `main`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Listing branches\n\nWe can see this by listing the branches. The command `git branch` displays all our local branches.\n\n```bash\ngit branch\n```\n\n**Output:**\n\n```plaintext\n  feature\n* main\n```\n\nThe current working branch is marked with an asterisk `*`.\n\n</br>\n</br>\n\nFurthermore, we can see more information when using `git log`.\n\n```bash\ngit log\n```\n\n**Output:**\n\n```plaintext\ncommit 0ad5c13d0496e517e66aad45ccf4cc75b09340df (HEAD -> main, feature)\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Wed Sep 18 00:34:58 2024 +0200\n\n    A\n```\n\nSpecifically, the `HEAD -> main, feature` part tells us that both `main` and `feature` are pointing to the same commit.\n\n`HEAD` always points to the tip of the branch.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Switching branches\n\nTo switch to the `feature` branch, we can use either the `checkout` or `switch` command.\n\n```bash\ngit checkout feature\ngit switch feature\n```\n\n`checkout` is supposedly a more versatile command, but both commands can be used to switch branches. In this context they do the same.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Create a new branch and switch to it\n\n> * Create a new branch called `feature`.\n> * Switch to the `feature` branch.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Create a new branch and switch to it\n\n```plaintext\ngit branch feature\ngit switch feature # or git checkout feature\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Exercise: Create a document.md file with changes on the `feature` branch\n\n> * Create a new file called `document.md`.\n> * Add a line of text to the `document.md` file that says `B`.\n> * Commit the file with the message also saying `B`.\n\n> * Do it again, except replace `B` with `C` in the above.\n\n</br>\n</br>\n\nWhen done use `git log` to see the history.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Solution: Create a document.md file with changes on the `feature` branch\n\n```bash\necho \"B\" >> document.md\ngit add document.md\ngit commit -m \"B\"\n\necho \"C\" >> document.md\ngit add document.md\ngit commit -m \"C\"\n```\n\n> **Note:** The `>>` operator appends text to a file. It also creates the file, if it does not exist. It only works on Unix-like systems.\n\n</br>\n\n**Output:**\n\n```plaintext\ncommit 787200cb8e96c3e830a3e5fbb0ec127278655325 (HEAD -> feature)\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Wed Sep 18 01:11:05 2024 +0200\n\n    C\n\ncommit cae02f432e63ec51c87c2a1faf944b602189dc57\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Wed Sep 18 01:10:47 2024 +0200\n\n    B\n\ncommit 0ad5c13d0496e517e66aad45ccf4cc75b09340df (main)\nAuthor: Lasse Lund Sten Jensen <lajl@itu.dk>\nDate:   Wed Sep 18 00:34:58 2024 +0200\n\n    A\n```\n\n</br>\n\nWe can see that `B` and `C` are on the `feature` branch, while `A` is on the `main` branch.\n\n</br>\n\nIt should look something like this:\n\n![Branch feature](../../images/lessons/git/branch-a-b-c.svg)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Deleting branches\n\nYou can delete branches with the `branch` command and the options `-d` and `-D`.\n\nRead up on it in the documentation, `man git-branch`.\n\n</br>\n\n```bash\ngit branch -d feature\n```\n\n> **Important:** Do **not** delete the branch now!\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## What do we do next?\n\nSo, we have made some changes on the `feature` branch and that is a job well done. Amazing code right there...\n\nWhat do we do with them?\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nMerge them back into `main` !\n\n</br>\n</br>\n","slug":"branches","title":"Branches","section":"Git basics","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/06-git-basics/E-branches.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/merging","prevSlug":"/itu-bds-sdse/lessons/git-basics/basic-commands-and-commit"}},"__N_SSG":true}