{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Temperature converter","keywords":["Software engineering","Go"]},"html":"<h2>Exercise: Temperature converter</h2>\n<p><em>Build a temperature converter CLI tool in Go using structs and pointers</em></p>\n<p><strong>Objective:</strong></p>\n<p>Create a command-line interface (CLI) tool in Go that converts temperatures between Celsius and Fahrenheit. The idea is to build a tool that can be embedded as a call in a script or similar. See the example outputs below.</p>\n<p>Try and use structs and pointers to acomplish this.</p>\n<p><strong>Requirements:</strong></p>\n<ol>\n<li><p><strong>Use a Temperature struct</strong></p>\n<ul>\n<li>Create a <code>Temperature</code> struct that contains:<ul>\n<li>A <code>Value</code> field representing the numerical temperature.</li>\n<li>A <code>Unit</code> field representing the unit of the temperature (&quot;C&quot; for Celsius or &quot;F&quot; for Fahrenheit).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Implement conversion functions using pointers</strong></p>\n<ul>\n<li>Write two functions:<ul>\n<li><code>celsiusToFahrenheit</code></li>\n<li><code>fahrenheitToCelsius</code></li>\n</ul>\n</li>\n<li>Each function should:<ul>\n<li>Accept a pointer to a <code>Temperature</code> struct.</li>\n<li>Perform the appropriate conversion using the temperature value from the given struct.</li>\n<li>Return a pointer to a new <code>Temperature</code> struct containing the converted temperature value and the new unit.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Accept arguments from command-line</strong></p>\n<ul>\n<li>The program should accept two command-line arguments when executed:<ul>\n<li>The temperature value (e.g., &quot;100&quot;)</li>\n<li>The unit of the temperature (&quot;C&quot; or &quot;F&quot;)</li>\n</ul>\n</li>\n<li><strong>Example usage:</strong><pre><code>&lt;binary&gt; 230 F\n</code></pre><blockquote>\n<p>The <code>&lt;binary&gt;</code> placeholder represents the name of the compiled binary file.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><strong>Perform conversion based on input</strong></p>\n<ul>\n<li>In the <code>main</code> function, create a pointer to a <code>Temperature</code> struct using the input arguments.</li>\n<li>Determine the unit provided and call the appropriate conversion function.<blockquote>\n<p><strong>Hint:</strong> Consider which control structure could be used to determine this.</p>\n</blockquote>\n</li>\n<li>Output the converted temperature value and unit to the console.</li>\n<li>Format the output to display the temperature value without decimal places.<blockquote>\n<p><strong>Hint:</strong> Use <code>fmt.Printf</code> with format specifiers to control the number type and number of decimal places displayed.</p>\n</blockquote>\n</li>\n<li><strong>Example output:</strong><pre><code>110 C\n</code></pre></li>\n</ul>\n</li>\n</ol>\n</br>\n\n<p><strong>Expected outputs:</strong></p>\n<blockquote>\n<p>We use <code>tempconverter</code> as an example for the binary and <code>$</code> indicates the command prompt.</p>\n</blockquote>\n<ul>\n<li><p><strong>Converting Fahrenheit to Celsius:</strong></p>\n<pre><code class=\"hljs language-bash\">$ tempconverter 230 F\n110 C\n</code></pre></li>\n<li><p><strong>Converting Celsius to Fahrenheit:</strong></p>\n<pre><code class=\"hljs language-bash\">$ tempconverter 100 C\n212 F\n</code></pre></li>\n</ul>\n</br>\n</br>\n\n<h3>Hints</h3>\n<blockquote>\n<p>Use the <code>os</code> package to access command-line arguments.</p>\n<pre><code class=\"hljs language-go\">os.Args[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// binary name</span>\nos.Args[<span class=\"hljs-number\">1</span>] <span class=\"hljs-comment\">// first argument</span>\nos.Args[<span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">// second argument</span>\n</code></pre></blockquote>\n<blockquote>\n<p>Use the <code>strconv</code> package to convert string arguments to numerical values. Like for example converting a string to a float64.</p>\n<pre><code class=\"hljs language-go\">value, err := strconv.ParseFloat(os.Args[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">64</span>)\n</code></pre></blockquote>\n<blockquote>\n<p>Force an exit if an error occurs with the <code>os.Exit</code> function. You can also use <code>panic</code>, but <code>os.Exit</code> is more appropriate for CLI tools.</p>\n<pre><code class=\"hljs language-go\">os.Exit(<span class=\"hljs-number\">1</span>)\n</code></pre></blockquote>\n</br>\n</br>\n\n<h3>Extra (optional) — Implement additional error handling</h3>\n<ul>\n<li><p>Handle invalid input of value.</p>\n<pre><code class=\"hljs language-bash\">$ tempconverter abc F\nInvalid temperature value. Please enter a numeric value.\n</code></pre></li>\n<li><p>Handle invalid input of unit.</p>\n<pre><code class=\"hljs language-bash\">$ tempconverter 100 K\nInvalid unit. Please provide <span class=\"hljs-string\">&#x27;C&#x27;</span> <span class=\"hljs-keyword\">for</span> Celsius or <span class=\"hljs-string\">&#x27;F&#x27;</span> <span class=\"hljs-keyword\">for</span> Fahrenheit.\n</code></pre></li>\n</ul>\n</br>\n</br>\n","markdown":"\n## Exercise: Temperature converter\n\n*Build a temperature converter CLI tool in Go using structs and pointers*\n\n**Objective:**\n\nCreate a command-line interface (CLI) tool in Go that converts temperatures between Celsius and Fahrenheit. The idea is to build a tool that can be embedded as a call in a script or similar. See the example outputs below.\n\nTry and use structs and pointers to acomplish this.\n\n**Requirements:**\n\n1. **Use a Temperature struct**\n\n   - Create a `Temperature` struct that contains:\n     - A `Value` field representing the numerical temperature.\n     - A `Unit` field representing the unit of the temperature (\"C\" for Celsius or \"F\" for Fahrenheit).\n\n2. **Implement conversion functions using pointers**\n\n   - Write two functions:\n     - `celsiusToFahrenheit`\n     - `fahrenheitToCelsius`\n   - Each function should:\n     - Accept a pointer to a `Temperature` struct.\n     - Perform the appropriate conversion using the temperature value from the given struct.\n     - Return a pointer to a new `Temperature` struct containing the converted temperature value and the new unit.\n\n3. **Accept arguments from command-line**\n\n   - The program should accept two command-line arguments when executed:\n     - The temperature value (e.g., \"100\")\n     - The unit of the temperature (\"C\" or \"F\")\n   - **Example usage:**\n     ```\n     <binary> 230 F\n     ```\n     > The `<binary>` placeholder represents the name of the compiled binary file.\n\n4. **Perform conversion based on input**\n\n   - In the `main` function, create a pointer to a `Temperature` struct using the input arguments.\n   - Determine the unit provided and call the appropriate conversion function.\n     > **Hint:** Consider which control structure could be used to determine this.\n   - Output the converted temperature value and unit to the console.\n   - Format the output to display the temperature value without decimal places.\n     > **Hint:** Use `fmt.Printf` with format specifiers to control the number type and number of decimal places displayed.\n   - **Example output:**\n     ```\n     110 C\n     ```\n\n</br>\n\n**Expected outputs:**\n\n> We use `tempconverter` as an example for the binary and `$` indicates the command prompt.\n\n* **Converting Fahrenheit to Celsius:**\n\n   ```bash\n   $ tempconverter 230 F\n   110 C\n   ```\n\n* **Converting Celsius to Fahrenheit:**\n\n   ```bash\n   $ tempconverter 100 C\n   212 F\n   ```\n\n</br>\n</br>\n\n### Hints\n\n> Use the `os` package to access command-line arguments.\n> \n> ```go\n> os.Args[0] // binary name\n> os.Args[1] // first argument\n> os.Args[2] // second argument\n> ```\n\n> Use the `strconv` package to convert string arguments to numerical values. Like for example converting a string to a float64.\n>\n> ```go\n> value, err := strconv.ParseFloat(os.Args[1], 64)\n> ```\n\n> Force an exit if an error occurs with the `os.Exit` function. You can also use `panic`, but `os.Exit` is more appropriate for CLI tools.\n>\n> ```go\n> os.Exit(1)\n> ```\n\n</br>\n</br>\n\n### Extra (optional) — Implement additional error handling\n\n* Handle invalid input of value.\n\n   ```bash\n   $ tempconverter abc F\n   Invalid temperature value. Please enter a numeric value.\n   ```\n\n* Handle invalid input of unit.\n\n   ```bash\n   $ tempconverter 100 K\n   Invalid unit. Please provide 'C' for Celsius or 'F' for Fahrenheit.\n   ```\n\n</br>\n</br>\n","slug":"temperature-converter","title":"Temperature converter","section":"Go exercises","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/05-go-exercises/B-temperature-converter.md","nextSlug":"/itu-bds-sdse/lessons/git-basics/introduction","prevSlug":"/itu-bds-sdse/lessons/go-exercises/linked-list"}},"__N_SSG":true}