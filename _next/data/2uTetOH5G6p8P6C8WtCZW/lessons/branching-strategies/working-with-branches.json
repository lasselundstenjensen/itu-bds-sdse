{"pageProps":{"post":{"attributes":{"description":"Branching strategies.","title":"Working with branches","keywords":["Software engineering","Git"]},"html":"<h2>Working with branches</h2>\n</br>\n\n<blockquote>\n<p>Why do we need branches?</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Some reasons to use branches</h2>\n<ul>\n<li><strong>Isolation</strong>: Branches allow you to work on a feature or bug fix without affecting the main codebase.</li>\n<li><strong>Collaboration</strong>: Branches allow multiple developers to work on different features simultaneously.</li>\n<li><strong>Testing</strong>: Branches allow you to test new features or bug fixes before merging them into the main codebase.</li>\n<li><strong>Experimentation</strong>: Branches allow you to experiment with new features or ideas without affecting the main codebase.</li>\n<li><strong>Backup</strong>: Branches allow you to create a backup of your work in case something goes wrong.</li>\n<li><strong>Code review</strong>: Branches allow you to create a pull request for code review before merging it into the main codebase.</li>\n<li><strong>Release management</strong>: Branches allow you to manage releases by creating release branches for each release.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>That said, there are several branching strategies available in the industry. Some are:</p>\n<ul>\n<li><strong>Feature branching</strong>: Create a branch for each feature or bug fix.</li>\n<li><strong>Release branching</strong>: Create a branch for each release.</li>\n<li><strong>Gitflow</strong>: A branching model that defines a strict branching strategy.</li>\n<li><strong>Trunk-based development</strong>: A branching model where all developers work on a single branch.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Branching falls into two categories:</h3>\n<ul>\n<li><strong>Long-lived branches</strong>: Branches that exist for a long time, such as <code>main</code>.</li>\n<li><strong>Short-lived branches</strong>: Branches that are created for a specific feature or bug fix and are deleted after merging.</li>\n</ul>\n</br>\n\n<p>As a contributor to a codebase, you use branches to work on new features, bug fixes, or experiments. You create a new branch for each task and work on it until it is <em>ready</em> to be merged into the main codebase.</p>\n<p><strong>Ready</strong> (usually, but varies with team contracts) means that the code is <em>tested</em>, <em>reviewed</em>, and <em>approved by the team</em>. Once the code is ready, you <strong>merge</strong> the branch into the main codebase and <strong>delete the branch</strong>.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>When you become part of a cross-functional team working with software, it is important to master versioning your code and litterally not break the shared codebase—&quot;the source of truth&quot;—for other team members. Branches play a crucial role here and is a great place to experiment.</p>\n<p>But do not fall in the trap of having long-lived branches. <strong>You</strong> will end up with the responsibility of merging and resolving conflicts. This is not a fun task.</p>\n</br>\n</br>\n","markdown":"\n## Working with branches\n\n</br>\n\n> Why do we need branches?\n\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Some reasons to use branches\n\n- **Isolation**: Branches allow you to work on a feature or bug fix without affecting the main codebase.\n- **Collaboration**: Branches allow multiple developers to work on different features simultaneously.\n- **Testing**: Branches allow you to test new features or bug fixes before merging them into the main codebase.\n- **Experimentation**: Branches allow you to experiment with new features or ideas without affecting the main codebase.\n- **Backup**: Branches allow you to create a backup of your work in case something goes wrong.\n- **Code review**: Branches allow you to create a pull request for code review before merging it into the main codebase.\n- **Release management**: Branches allow you to manage releases by creating release branches for each release.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThat said, there are several branching strategies available in the industry. Some are:\n\n- **Feature branching**: Create a branch for each feature or bug fix.\n- **Release branching**: Create a branch for each release.\n- **Gitflow**: A branching model that defines a strict branching strategy.\n- **Trunk-based development**: A branching model where all developers work on a single branch.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Branching falls into two categories:\n\n- **Long-lived branches**: Branches that exist for a long time, such as `main`.\n- **Short-lived branches**: Branches that are created for a specific feature or bug fix and are deleted after merging.\n\n</br>\n\nAs a contributor to a codebase, you use branches to work on new features, bug fixes, or experiments. You create a new branch for each task and work on it until it is *ready* to be merged into the main codebase.\n\n**Ready** (usually, but varies with team contracts) means that the code is *tested*, *reviewed*, and *approved by the team*. Once the code is ready, you **merge** the branch into the main codebase and **delete the branch**.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nWhen you become part of a cross-functional team working with software, it is important to master versioning your code and litterally not break the shared codebase—\"the source of truth\"—for other team members. Branches play a crucial role here and is a great place to experiment.\n\nBut do not fall in the trap of having long-lived branches. **You** will end up with the responsibility of merging and resolving conflicts. This is not a fun task.\n\n</br>\n</br>\n","slug":"working-with-branches","title":"Working with branches","section":"Branching strategies","icon":"info-circle","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/07-branching-strategies/A-working-with-branches.md","nextSlug":"/itu-bds-sdse/lessons/branching-strategies/gitflow","prevSlug":"/itu-bds-sdse/lessons/git-basics/ssh-and-github"}},"__N_SSG":true}