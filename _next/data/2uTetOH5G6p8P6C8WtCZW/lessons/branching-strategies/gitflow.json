{"pageProps":{"post":{"attributes":{"description":"Branching strategies.","title":"Gitflow","keywords":["Software engineering","Git"]},"html":"<h2>Gitflow</h2>\n<p>Gitflow is a branching model that helps teams manage their codebase by defining a strict branching strategy. It was created by Vincent Driessen and is widely used in the software industry.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<blockquote>\n<p><strong>Only</strong> use Gitflow if you are working on a <strong>large project</strong> with <strong>numerous developers</strong> and/or <strong>multiple development teams</strong>. For small projects, Gitflow <strong>IS</strong> overkill and will cause slowdown due to complexity. Large here means projects such as the Youtube mobile app, or projects with 100+ developers across multiple teams where releases are not happening on a daily basis (typically).</p>\n</blockquote>\n<blockquote>\n<p><strong>Advice:</strong> Be pragmatic. And be cautious if you see Gitflow being used in a small project.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Gitflow defines two primary branches:</h3>\n<ul>\n<li><code>main</code>: The main branch that contains the production-ready code.</li>\n<li><code>develop</code>: The main branch that contains the latest development code.</li>\n</ul>\n</br>\n\n<h3>Additionally, it defines three types of supporting branches:</h3>\n<ul>\n<li><code>feature</code>: Branches used to develop new features.</li>\n<li><code>release</code>: Branches used to prepare a new release.</li>\n<li><code>hotfix</code>: Branches used to fix bugs in the production code.</li>\n</ul>\n</br>\n\n<div style=\"background-color: white;\">\n<img src=\"../../images/lessons/git/gitflow-primary-branches.svg\" />\n</div>\n\n</br>\n\n<p><em>Source: <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></em></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Feature branches</h2>\n<p>Feature branches are used to develop new features or bug fixes. They are created from the <code>develop</code> branch and merged back into the <code>develop</code> branch when the feature is complete.</p>\n</br>\n\n<div style=\"background-color: white;\">\n<img src=\"../../images/lessons/git/feature-branches.svg\" />\n</div>\n\n<!-- ![Feature branches](../../images/lessons/git/feature-branches.svg) -->\n\n</br>\n\n<p><em>Source: <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></em></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Release branches</h2>\n<p>Release branches are used to prepare a new release. They are created from the <code>develop</code> branch and merged back into the <code>develop</code> and <code>main</code> branches when the release is complete.</p>\n</br>\n\n<div style=\"background-color: white;\">\n<img src=\"../../images/lessons/git/release-branches.svg\" />\n</div>\n\n</br>\n\n<p><em>Source: <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></em></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Hotfix branches</h2>\n<p>Feature branches are used to develop new features or bug fixes. They are created from the <code>develop</code> branch and merged back into the <code>develop</code> branch when the feature is complete.</p>\n</br>\n\n<div style=\"background-color: white;\">\n<img src=\"../../images/lessons/git/hotfix-branches.svg\" />\n</div>\n\n</br>\n\n<p><em>Source: <a href=\"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow\">https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow</a></em></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>So.. what is challenging in this from a developer perspective?</h2>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<ul>\n<li><strong>Complexity</strong>: Gitflow is complex and can be difficult to understand for new developers.</li>\n<li><strong>Overhead</strong>: Gitflow introduces overhead in terms of managing multiple branches.</li>\n<li><strong>Slowdown</strong>: Gitflow can slow down the development process due to the complexity of managing multiple branches.</li>\n<li><strong>Merge conflicts</strong>: Gitflow can lead to more merge conflicts due to the number of branches that need to be merged.</li>\n<li><strong>Overkill</strong>: Gitflow is overkill for small projects with a small team of developers.</li>\n<li><strong>Release management</strong>: Gitflow can be cumbersome for managing releases.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>There are simpler alternatives—One is called <strong>trunk-based development</strong>.</p>\n</br>\n</br>\n","markdown":"\n## Gitflow\n\nGitflow is a branching model that helps teams manage their codebase by defining a strict branching strategy. It was created by Vincent Driessen and is widely used in the software industry.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n> **Only** use Gitflow if you are working on a **large project** with **numerous developers** and/or **multiple development teams**. For small projects, Gitflow **IS** overkill and will cause slowdown due to complexity. Large here means projects such as the Youtube mobile app, or projects with 100+ developers across multiple teams where releases are not happening on a daily basis (typically).\n\n> **Advice:** Be pragmatic. And be cautious if you see Gitflow being used in a small project.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Gitflow defines two primary branches:\n\n- `main`: The main branch that contains the production-ready code.\n- `develop`: The main branch that contains the latest development code.\n\n</br>\n\n### Additionally, it defines three types of supporting branches:\n\n- `feature`: Branches used to develop new features.\n- `release`: Branches used to prepare a new release.\n- `hotfix`: Branches used to fix bugs in the production code.\n\n</br>\n\n<div style=\"background-color: white;\">\n<img src=\"../../images/lessons/git/gitflow-primary-branches.svg\" />\n</div>\n\n</br>\n\n*Source: https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow*\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Feature branches\n\nFeature branches are used to develop new features or bug fixes. They are created from the `develop` branch and merged back into the `develop` branch when the feature is complete.\n\n</br>\n\n<div style=\"background-color: white;\">\n<img src=\"../../images/lessons/git/feature-branches.svg\" />\n</div>\n\n<!-- ![Feature branches](../../images/lessons/git/feature-branches.svg) -->\n\n</br>\n\n*Source: https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow*\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Release branches\n\nRelease branches are used to prepare a new release. They are created from the `develop` branch and merged back into the `develop` and `main` branches when the release is complete.\n\n</br>\n\n<div style=\"background-color: white;\">\n<img src=\"../../images/lessons/git/release-branches.svg\" />\n</div>\n\n</br>\n\n*Source: https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow*\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Hotfix branches\n\nFeature branches are used to develop new features or bug fixes. They are created from the `develop` branch and merged back into the `develop` branch when the feature is complete.\n\n</br>\n\n<div style=\"background-color: white;\">\n<img src=\"../../images/lessons/git/hotfix-branches.svg\" />\n</div>\n\n</br>\n\n*Source: https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow*\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## So.. what is challenging in this from a developer perspective?\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n- **Complexity**: Gitflow is complex and can be difficult to understand for new developers.\n- **Overhead**: Gitflow introduces overhead in terms of managing multiple branches.\n- **Slowdown**: Gitflow can slow down the development process due to the complexity of managing multiple branches.\n- **Merge conflicts**: Gitflow can lead to more merge conflicts due to the number of branches that need to be merged.\n- **Overkill**: Gitflow is overkill for small projects with a small team of developers.\n- **Release management**: Gitflow can be cumbersome for managing releases.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThere are simpler alternatives—One is called **trunk-based development**.\n\n</br>\n</br>\n","slug":"gitflow","title":"Gitflow","section":"Branching strategies","icon":"info-circle","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/07-branching-strategies/B-gitflow.md","nextSlug":"/itu-bds-sdse/lessons/branching-strategies/trunk-based-development","prevSlug":"/itu-bds-sdse/lessons/branching-strategies/working-with-branches"}},"__N_SSG":true}