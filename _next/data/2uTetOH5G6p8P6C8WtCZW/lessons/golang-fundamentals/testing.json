{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Testing","keywords":["Software engineering","Go"]},"html":"<h2>Testing in Go</h2>\n<ul>\n<li>Go has a built-in testing framework.</li>\n<li>Tests should be in the same package as the code they are testing.</li>\n<li>Test files must have the suffix <code>_test.go</code>.</li>\n<li>The Go CLI <code>go test</code> command is used to run tests.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3>Example: Code under test</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PrintMyName</span><span class=\"hljs-params\">(name <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> {\n    <span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">&quot;Hello, my name is %s.&quot;</span>, name)\n}\n</code></pre></br>\n\n<h3>Example: Test case</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;testing&quot;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestPrintMyName</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n    testCases := []<span class=\"hljs-keyword\">struct</span> {\n        name        <span class=\"hljs-type\">string</span>\n        value       <span class=\"hljs-type\">string</span>\n        expectValue <span class=\"hljs-type\">string</span>\n        expectFail  <span class=\"hljs-type\">bool</span>\n    }{\n        {<span class=\"hljs-string\">&quot;Valid response&quot;</span>, <span class=\"hljs-string\">&quot;John Doe&quot;</span>, <span class=\"hljs-string\">&quot;Hello, my name is John Doe.&quot;</span>, <span class=\"hljs-literal\">false</span>},\n        {<span class=\"hljs-string\">&quot;Invalid response&quot;</span>, <span class=\"hljs-string\">&quot;John Doe&quot;</span>, <span class=\"hljs-string\">&quot;Hello, my name is .&quot;</span>, <span class=\"hljs-literal\">true</span>},\n        {<span class=\"hljs-string\">&quot;Valid lower case name&quot;</span>, <span class=\"hljs-string\">&quot;john doe&quot;</span>, <span class=\"hljs-string\">&quot;Hello, my name is john doe.&quot;</span>, <span class=\"hljs-literal\">false</span>},\n    }\n\n    <span class=\"hljs-keyword\">for</span> _, tc := <span class=\"hljs-keyword\">range</span> testCases {\n        t.Run(tc.name, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *testing.T)</span></span> {\n            out := PrintMyName(tc.value)\n            <span class=\"hljs-keyword\">if</span> out != tc.expectValue &amp;&amp; !tc.expectFail {\n                t.Errorf(<span class=\"hljs-string\">&quot;expected value: %s, got: %s, for name: &#x27;%s&#x27;&quot;</span>, tc.expectValue, out, tc.value)\n            }\n        })\n    }\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Running tests</h2>\n<pre><code class=\"hljs language-bash\">go <span class=\"hljs-built_in\">test</span> .\n</code></pre></br>\n\n<blockquote>\n<p><strong>Note:</strong> There are other ways to run tests, such as <code>go test -v .</code> to get more verbose output.</p>\n</blockquote>\n<blockquote>\n<p><strong>Note:</strong> You can also get coverage reports with <code>go test -cover .</code>.</p>\n</blockquote>\n</br>\n</br>\n","markdown":"\n## Testing in Go\n\n* Go has a built-in testing framework.\n* Tests should be in the same package as the code they are testing.\n* Test files must have the suffix `_test.go`.\n* The Go CLI `go test` command is used to run tests.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### Example: Code under test\n\n```go\nfunc PrintMyName(name string) string {\n    return fmt.Sprintf(\"Hello, my name is %s.\", name)\n}\n```\n\n</br>\n\n### Example: Test case\n\n```go\npackage main\n\nimport \"testing\"\n\nfunc TestPrintMyName(t *testing.T) {\n    testCases := []struct {\n        name        string\n        value       string\n        expectValue string\n        expectFail  bool\n    }{\n        {\"Valid response\", \"John Doe\", \"Hello, my name is John Doe.\", false},\n        {\"Invalid response\", \"John Doe\", \"Hello, my name is .\", true},\n        {\"Valid lower case name\", \"john doe\", \"Hello, my name is john doe.\", false},\n    }\n\n    for _, tc := range testCases {\n        t.Run(tc.name, func(t *testing.T) {\n            out := PrintMyName(tc.value)\n            if out != tc.expectValue && !tc.expectFail {\n                t.Errorf(\"expected value: %s, got: %s, for name: '%s'\", tc.expectValue, out, tc.value)\n            }\n        })\n    }\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Running tests\n\n```bash\ngo test .\n```\n\n</br>\n\n> **Note:** There are other ways to run tests, such as `go test -v .` to get more verbose output.\n\n> **Note:** You can also get coverage reports with `go test -cover .`.\n\n</br>\n</br>\n","slug":"testing","title":"Testing","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/T-testing.md","nextSlug":"/itu-bds-sdse/lessons/go-exercises/linked-list","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/channels"}},"__N_SSG":true}