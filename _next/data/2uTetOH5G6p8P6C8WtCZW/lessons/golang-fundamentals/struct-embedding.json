{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Struct embedding","keywords":["Software engineering","Go"]},"html":"<h2>Struct embedding</h2>\n<p>Let&#39;s say we want to create a workshop based on our <code>Course</code> struct.</p>\n<p>We could create a new struct <code>Workshop</code> and copy all the fields from <code>Course</code> into it. But that would be a lot of duplication.</p>\n<p>Let&#39;s start by creating a new struct <code>Workshop</code>:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Workshop <span class=\"hljs-keyword\">struct</span> {\n    Course Course\n    Date   time.Time\n}\n</code></pre></br>\n\n<p>We can instantiate and print it:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">var</span> w = Workshop{\n        Course: Course{Name: <span class=\"hljs-string\">&quot;Go&quot;</span>, Instructor: Instructor{FirstName: <span class=\"hljs-string\">&quot;Lasse&quot;</span>, LastName: <span class=\"hljs-string\">&quot;Jensen&quot;</span>}},\n        Date:   time.Now(),\n    }\n    fmt.Printf(<span class=\"hljs-string\">&quot;%v&quot;</span>, w)\n}\n</code></pre></br>\n\n<p>Looks good? Well, it works, but we can do better.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>To avoid duplication, we can embed the <code>Course</code> struct into the <code>Workshop</code> struct:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Workshop <span class=\"hljs-keyword\">struct</span> {\n    Course\n    Date time.Time\n}\n</code></pre><p>We simply remove the identifier <code>Course</code> and keep the type to embed it.</p>\n</br>\n\n<blockquote>\n<p>Is it extending the <code>Course</code> struct? No, under the hood it copies the fields from <code>Course</code> into <code>Workshop</code>.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>A downside of using embedding is that fields cannot be set directly when creating an instance of the <code>Workshop</code> struct.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">var</span> w = Workshop{\n        Name: <span class=\"hljs-string\">&quot;Go&quot;</span>, <span class=\"hljs-comment\">// Error: unknown field &#x27;Name&#x27; in struct literal</span>\n        Instructor: Instructor{FirstName: <span class=\"hljs-string\">&quot;Lasse&quot;</span>, LastName: <span class=\"hljs-string\">&quot;Jensen&quot;</span>}, <span class=\"hljs-comment\">// Error: unknown field &#x27;Instructor&#x27; in struct literal</span>\n        Date: time.Now(),\n    }\n    fmt.Printf(<span class=\"hljs-string\">&quot;%v&quot;</span>, w)\n}\n</code></pre></br>\n\n<p>To set the fields, we need to use the <code>Course</code> type:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-keyword\">var</span> w = Workshop{\n        Course: Course{Name: <span class=\"hljs-string\">&quot;Go&quot;</span>, Instructor: Instructor{FirstName: <span class=\"hljs-string\">&quot;Lasse&quot;</span>, LastName: <span class=\"hljs-string\">&quot;Jensen&quot;</span>}},\n        Date:   time.Now(),\n    }\n    fmt.Printf(<span class=\"hljs-string\">&quot;%v&quot;</span>, w)\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>One way to make this look nicer is to use the <strong>factory pattern</strong>:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewWorkshop</span><span class=\"hljs-params\">(courseName <span class=\"hljs-type\">string</span>, instructor Instructor, date time.Time)</span></span> Workshop {\n    <span class=\"hljs-keyword\">return</span> Workshop{\n        Course: Course{Name: courseName, Instructor: instructor},\n        Date:   date,\n    }\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Order of properties</h2>\n<p>What happens if we have the same field in both the <code>Workshop</code> and <code>Course</code> structs?</p>\n</br>\n\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">type</span> Workshop <span class=\"hljs-keyword\">struct</span> {\n    Course\n    Date time.Time\n    Name <span class=\"hljs-type\">string</span> <span class=\"hljs-comment\">// Error: duplicate field &#x27;Name&#x27; ???</span>\n}\n</code></pre></br>\n\n<blockquote>\n<p>Will we get an error? No, Go will use the field from the <code>Workshop</code> struct as it is the &quot;closest&quot;.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>We can still set the name of the <code>Course.Name</code> field, but we need to be explicit:</p>\n</br>\n\n<pre><code class=\"hljs language-go\">w.Name = <span class=\"hljs-string\">&quot;Go workshop&quot;</span>\n\nw.Course.Name = <span class=\"hljs-string\">&quot;Go course&quot;</span>\n</code></pre></br>\n\n<blockquote>\n<p><code>w.Course.Name</code> is also called an embedding property.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Sharing of methods</h2>\n<p>When you embed a struct, you also get access to its methods. Neat!</p>\n</br>\n</br>\n","markdown":"\n## Struct embedding\n\nLet's say we want to create a workshop based on our `Course` struct.\n\nWe could create a new struct `Workshop` and copy all the fields from `Course` into it. But that would be a lot of duplication.\n\nLet's start by creating a new struct `Workshop`:\n\n```go\ntype Workshop struct {\n    Course Course\n    Date   time.Time\n}\n```\n\n</br>\n\nWe can instantiate and print it:\n\n```go\nfunc main() {\n    var w = Workshop{\n        Course: Course{Name: \"Go\", Instructor: Instructor{FirstName: \"Lasse\", LastName: \"Jensen\"}},\n        Date:   time.Now(),\n    }\n    fmt.Printf(\"%v\", w)\n}\n```\n\n</br>\n\nLooks good? Well, it works, but we can do better.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nTo avoid duplication, we can embed the `Course` struct into the `Workshop` struct:\n\n```go\ntype Workshop struct {\n    Course\n    Date time.Time\n}\n```\n\nWe simply remove the identifier `Course` and keep the type to embed it.\n\n</br>\n\n> Is it extending the `Course` struct? No, under the hood it copies the fields from `Course` into `Workshop`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nA downside of using embedding is that fields cannot be set directly when creating an instance of the `Workshop` struct.\n\n```go\nfunc main() {\n    var w = Workshop{\n        Name: \"Go\", // Error: unknown field 'Name' in struct literal\n        Instructor: Instructor{FirstName: \"Lasse\", LastName: \"Jensen\"}, // Error: unknown field 'Instructor' in struct literal\n        Date: time.Now(),\n    }\n    fmt.Printf(\"%v\", w)\n}\n```\n\n</br>\n\nTo set the fields, we need to use the `Course` type:\n\n```go\nfunc main() {\n    var w = Workshop{\n        Course: Course{Name: \"Go\", Instructor: Instructor{FirstName: \"Lasse\", LastName: \"Jensen\"}},\n        Date:   time.Now(),\n    }\n    fmt.Printf(\"%v\", w)\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nOne way to make this look nicer is to use the **factory pattern**:\n\n```go\nfunc NewWorkshop(courseName string, instructor Instructor, date time.Time) Workshop {\n    return Workshop{\n        Course: Course{Name: courseName, Instructor: instructor},\n        Date:   date,\n    }\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Order of properties\n\nWhat happens if we have the same field in both the `Workshop` and `Course` structs?\n\n</br>\n\n```go\ntype Workshop struct {\n    Course\n    Date time.Time\n    Name string // Error: duplicate field 'Name' ???\n}\n```\n\n</br>\n\n> Will we get an error? No, Go will use the field from the `Workshop` struct as it is the \"closest\".\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nWe can still set the name of the `Course.Name` field, but we need to be explicit:\n\n</br>\n\n```go\nw.Name = \"Go workshop\"\n\nw.Course.Name = \"Go course\"\n```\n\n</br>\n\n> `w.Course.Name` is also called an embedding property.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Sharing of methods\n\nWhen you embed a struct, you also get access to its methods. Neat!\n\n</br>\n</br>\n","slug":"struct-embedding","title":"Struct embedding","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/P-struct-embedding.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/defining-interfaces","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/implementing-interfaces"}},"__N_SSG":true}