{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Packages","keywords":["Software engineering","Go"]},"html":"<h2>Packages</h2>\n<p>In Go, a package is a collection of Go source files that are in the same directory.</p>\n<p>A package can be imported into another package. The package name is the same as the last element of the import path. For example, the package name for the import path <code>fmt</code> is <code>fmt</code>.</p>\n</br>\n</br>\n\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main    <span class=\"hljs-comment\">// package declaration</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>    <span class=\"hljs-comment\">// import statement</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {   <span class=\"hljs-comment\">// Main app&#x27;s entry point</span>\n    fmt.Println(<span class=\"hljs-string\">&quot;Hello from Go!&quot;</span>)\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>Files in a package must be in the same folder.</p>\n<p>The package name is the same as the folder name.</p>\n<p>When importing packages from the internet, the import path is the URL of the package.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>The Go compiler will actually group all files that belong to the same package at compile time.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>TRY IT OUT</h2>\n<p><img src=\"../../images/rob-pike.png\" alt=\"Rob Pike\"></p>\n</br>\n\n<ul>\n<li>Multiple files in a package</li>\n<li>Importing from the same package</li>\n<li>Referencing from the same package</li>\n<li>Creating a new package</li>\n<li>Referencing from another package</li>\n<li>Unsafe <code>print</code> and <code>println</code> functions and safe alternatives</li>\n<li>Comments</li>\n<li>Linting on save only (VSCode)</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Visibility</h2>\n<p>Convention in Go is that the first letter of an identifier determines its visibility.</p>\n</br>\n\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PrintData</span><span class=\"hljs-params\">()</span></span> {\n    fmt.Println(<span class=\"hljs-string\">&quot;Hello from PrintData!&quot;</span>)\n}\n</code></pre></br>\n\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    PrintData()\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Other notes</h2>\n<ul>\n<li>Imports are per file, not per package.</li>\n<li>Importing a package in the same module is done with the project name (in the <code>go.mod</code> file) as prefix to the package name—think of it as a path.</li>\n<li>Imported packages can be aliased.</li>\n<li>Referencing a package is done with the package name as prefix to the identifier.</li>\n</ul>\n</br>\n</br>\n","markdown":"\n## Packages\n\nIn Go, a package is a collection of Go source files that are in the same directory.\n\nA package can be imported into another package. The package name is the same as the last element of the import path. For example, the package name for the import path `fmt` is `fmt`.\n\n</br>\n</br>\n\n```go\npackage main    // package declaration\n\nimport \"fmt\"    // import statement\n\nfunc main() {   // Main app's entry point\n    fmt.Println(\"Hello from Go!\")\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nFiles in a package must be in the same folder.\n\nThe package name is the same as the folder name.\n\nWhen importing packages from the internet, the import path is the URL of the package.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThe Go compiler will actually group all files that belong to the same package at compile time.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## TRY IT OUT\n\n![Rob Pike](../../images/rob-pike.png)\n\n</br>\n\n- Multiple files in a package\n- Importing from the same package\n- Referencing from the same package\n- Creating a new package\n- Referencing from another package\n- Unsafe `print` and `println` functions and safe alternatives\n- Comments\n- Linting on save only (VSCode)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Visibility\n\nConvention in Go is that the first letter of an identifier determines its visibility.\n\n</br>\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc PrintData() {\n    fmt.Println(\"Hello from PrintData!\")\n}\n```\n\n</br>\n\n```go\npackage main\n\nfunc main() {\n    PrintData()\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Other notes\n\n- Imports are per file, not per package.\n- Importing a package in the same module is done with the project name (in the `go.mod` file) as prefix to the package name—think of it as a path.\n- Imported packages can be aliased.\n- Referencing a package is done with the package name as prefix to the identifier.\n\n</br>\n</br>\n","slug":"packages","title":"Packages","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/D-packages.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/visibility","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/data-types"}},"__N_SSG":true}