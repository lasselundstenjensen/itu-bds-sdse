{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Numbers and collections","keywords":["Software engineering","Go"]},"html":"<h2>Numbers</h2>\n<p>Conversion between numbers can be done using a global built-in function with the type name.</p>\n<pre><code class=\"hljs language-go\">myId := <span class=\"hljs-number\">10</span>\n\nmyTicketPrice := <span class=\"hljs-number\">55.7</span>\n\n\n\nmyIdAsFloat := <span class=\"hljs-type\">float64</span>(myId)\nmyTicketPriceAsInt := <span class=\"hljs-type\">int</span>(myTicketPrice)\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<blockquote>\n<p>Not every conversion is possible, e.g. a <code>string</code> into a <code>bool</code>.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Strings</h2>\n<p>Multiline strings can be created using backticks.</p>\n<pre><code class=\"hljs language-go\">strSingle := <span class=\"hljs-string\">&quot;Just a single line of text.&quot;</span>\n\nstrMulti := <span class=\"hljs-string\">`We are\non multiple\nlines here!`</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Collections</h2>\n<p>What do we have?</p>\n</br>\n\n<h3><strong>Arrays</strong></h3>\n<p>Fixed length</p>\n<pre><code class=\"hljs language-go\">[<span class=\"hljs-number\">5</span>]<span class=\"hljs-type\">int</span>\n</code></pre><h3><strong>Slices</strong></h3>\n<p>Similar to dynamic length arrays, but are in practice chunks of arrays</p>\n<pre><code class=\"hljs language-go\">[]<span class=\"hljs-type\">int</span>\n</code></pre><h3><strong>Maps</strong></h3>\n<p>Key-value dictionaries</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">map</span>[keyType]valueType\n\n<span class=\"hljs-comment\">// Example</span>\n<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">int</span>\n</code></pre><h3><strong>Generics</strong></h3>\n<p>Since Go version 1.18</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>TRY IT OUT</h2>\n<p><img src=\"../../images/rob-pike.png\" alt=\"Rob Pike\"></p>\n</br>\n\n<ul>\n<li>Declare a new array with a length of <code>20</code> and type <code>string</code>.</li>\n<li>Declare a new slice with the type <code>int</code>.</li>\n<li>Declare a new map with a key of type <code>int</code> and a value of type <code>string</code>.</li>\n<li>Discuss the special function <code>init</code>. This is not the same as <strong>main()</strong> ! Not a constructor.</li>\n<li>The <code>len()</code> function returns the length of a collection.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<blockquote>\n<p>Collections are not objects. We use global functions to work with collections, such as <code>len()</code> and <code>cap()</code>.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Arrays and slices</h2>\n<p>Remember, arrays are fixed length and slices are dynamic length.</p>\n</br>\n\n<h3>Arrays</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> countries [<span class=\"hljs-number\">180</span>]<span class=\"hljs-type\">string</span>\ncountries[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&quot;Denmark&quot;</span>\n\n<span class=\"hljs-comment\">// Initialize with values, shorthand notation</span>\naccounts := [<span class=\"hljs-number\">5</span>]<span class=\"hljs-type\">int</span>{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>}\n</code></pre></br>\n\n<h3>Slices</h3>\n<p><strong>Declaring a string slice.</strong></p>\n<p>We use append to add values and note that the new slice is assigned back to the variable.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> countries []<span class=\"hljs-type\">string</span>\ncountries = <span class=\"hljs-built_in\">append</span>(countries, <span class=\"hljs-string\">&quot;Denmark&quot;</span>)\n</code></pre><p><strong>Initialize with values.</strong></p>\n<p>Overrides any capacity defined in the declaration.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> countries = []<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">&quot;Denmark&quot;</span>, <span class=\"hljs-string\">&quot;Sweden&quot;</span>, <span class=\"hljs-string\">&quot;Norway&quot;</span>}\n<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-built_in\">len</span>(countries))\n</code></pre><p><strong>Initialize with a capacity of 5.</strong></p>\n<p>This defines the default increment size when the slice runs out of space.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> countries = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">5</span>)\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Maps</h2>\n<p>Pay attention to the type definition.</p>\n<ul>\n<li>For maps the default value is <code>nil</code>—initialization is required.</li>\n</ul>\n</br>\n\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> platformUsers = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">int</span>{<span class=\"hljs-string\">&quot;Facebook&quot;</span>: <span class=\"hljs-number\">1000000</span>, <span class=\"hljs-string\">&quot;Twitter&quot;</span>: <span class=\"hljs-number\">500000</span>}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>The <code>make()</code> function can also be used to initialize a map and this is most commonly what is done as maps are rarely small in size.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> platformUsers = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">int</span>)\n\nplatformUsers[<span class=\"hljs-string\">&quot;Facebook&quot;</span>] = <span class=\"hljs-number\">1000000</span>\nplatformUsers[<span class=\"hljs-string\">&quot;Twitter&quot;</span>] = <span class=\"hljs-number\">500000</span>\n</code></pre></br>\n</br>\n","markdown":"\n## Numbers\n\nConversion between numbers can be done using a global built-in function with the type name.\n\n```go\nmyId := 10\n\nmyTicketPrice := 55.7\n\n\n\nmyIdAsFloat := float64(myId)\nmyTicketPriceAsInt := int(myTicketPrice)\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n> Not every conversion is possible, e.g. a `string` into a `bool`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Strings\n\nMultiline strings can be created using backticks.\n\n```go\nstrSingle := \"Just a single line of text.\"\n\nstrMulti := `We are\non multiple\nlines here!`\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Collections\n\nWhat do we have?\n\n</br>\n\n### **Arrays**\n\nFixed length\n\n```go\n[5]int\n```\n\n### **Slices**\n\nSimilar to dynamic length arrays, but are in practice chunks of arrays\n\n```go\n[]int\n```\n\n### **Maps**\n\nKey-value dictionaries\n\n```go\nmap[keyType]valueType\n\n// Example\nmap[string]int\n```\n\n### **Generics**\n\nSince Go version 1.18\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## TRY IT OUT\n\n![Rob Pike](../../images/rob-pike.png)\n\n</br>\n\n- Declare a new array with a length of `20` and type `string`.\n- Declare a new slice with the type `int`.\n- Declare a new map with a key of type `int` and a value of type `string`.\n- Discuss the special function `init`. This is not the same as **main()** ! Not a constructor.\n- The `len()` function returns the length of a collection.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n> Collections are not objects. We use global functions to work with collections, such as `len()` and `cap()`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Arrays and slices\n\nRemember, arrays are fixed length and slices are dynamic length.\n\n</br>\n\n### Arrays\n\n```go\nvar countries [180]string\ncountries[0] = \"Denmark\"\n\n// Initialize with values, shorthand notation\naccounts := [5]int{1, 2, 3, 4, 5}\n```\n\n</br>\n\n### Slices\n\n**Declaring a string slice.**\n\nWe use append to add values and note that the new slice is assigned back to the variable.\n\n```go\nvar countries []string\ncountries = append(countries, \"Denmark\")\n```\n\n**Initialize with values.**\n\nOverrides any capacity defined in the declaration.\n\n```go\nvar countries = []string{\"Denmark\", \"Sweden\", \"Norway\"}\nprintln(len(countries))\n```\n\n**Initialize with a capacity of 5.**\n\nThis defines the default increment size when the slice runs out of space.\n\n```go\nvar countries = make([]string, 5)\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Maps\n\nPay attention to the type definition.\n\n- For maps the default value is `nil`—initialization is required.\n\n</br>\n\n```go\nvar platformUsers = map[string]int{\"Facebook\": 1000000, \"Twitter\": 500000}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThe `make()` function can also be used to initialize a map and this is most commonly what is done as maps are rarely small in size.\n\n```go\nvar platformUsers = make(map[string]int)\n\nplatformUsers[\"Facebook\"] = 1000000\nplatformUsers[\"Twitter\"] = 500000\n```\n\n</br>\n</br>\n","slug":"numbers-and-collections","title":"Numbers and collections","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/F-numbers-and-collections.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/functions","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/visibility"}},"__N_SSG":true}