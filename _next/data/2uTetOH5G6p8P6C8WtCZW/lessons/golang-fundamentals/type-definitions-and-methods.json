{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Type definitions and methods","keywords":["Software engineering","Go"]},"html":"<h2>Type definitions</h2>\n<p>Recap: packages can include variables, constants, and functions.</p>\n<p>But they can also include types:</p>\n<ul>\n<li><strong>New types</strong></li>\n<li><strong>Aliases</strong></li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">// Type alias</span>\n<span class=\"hljs-keyword\">type</span> customString = <span class=\"hljs-type\">string</span>\n\n<span class=\"hljs-comment\">// New type based on an existing type</span>\n<span class=\"hljs-keyword\">type</span> customString <span class=\"hljs-type\">string</span>\n\n<span class=\"hljs-comment\">// A type has constructor and conversion functions</span>\ncs := customString(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n</code></pre><blockquote>\n<p>You can add methods to a new type, but not to an alias.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Methods</h2>\n<p>Methods are extensions to types and are defined with a special syntax on functions.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(cs customString)</span></span> PrintInChinese() <span class=\"hljs-type\">string</span> {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\ncs.PrintInChinese()\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>TRY IT OUT</h2>\n<p><img src=\"../../images/rob-pike.png\" alt=\"Rob Pike\"></p>\n</br>\n\n<h3>Exercise: Distance converter</h3>\n<blockquote>\n<p>Create a new type &#39;distance&#39; from an existing number type.</p>\n</blockquote>\n<blockquote>\n<p>Declare a variable of type &#39;distance&#39;; lets call it &#39;miles&#39;.</p>\n</blockquote>\n<blockquote>\n<p>Create a method for the &#39;distance&#39; type that converts the distance to kilometers.</p>\n</blockquote>\n<blockquote>\n<p>Call the method on the &#39;miles&#39; variable and print the result.</p>\n</blockquote>\n<!-- You can also think about the attribute argument as: func (this TheType) TheFunction() {} -->\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Complex types</h2>\n<p>We got two complex types in Go: <strong>Structs</strong> and <strong>Interfaces</strong>.</p>\n<h3>Structures</h3>\n<ul>\n<li>They are similar to the idea of a class</li>\n<li>Got a default constructor mechanism</li>\n<li>Can have methods</li>\n<li>A data type with strongly typed properties</li>\n</ul>\n<h3>Interfaces</h3>\n<ul>\n<li>A collection of method signatures</li>\n<li>Emulates polymorphism from OOP</li>\n<li>Interfaces can be embedded in other interfaces</li>\n<li>Implicit implementation</li>\n</ul>\n</br>\n</br>\n","markdown":"\n## Type definitions\n\nRecap: packages can include variables, constants, and functions.\n\nBut they can also include types:\n\n* **New types**\n* **Aliases**\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n```go\n// Type alias\ntype customString = string\n\n// New type based on an existing type\ntype customString string\n\n// A type has constructor and conversion functions\ncs := customString(\"Hello\")\n```\n\n> You can add methods to a new type, but not to an alias.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Methods\n\nMethods are extensions to types and are defined with a special syntax on functions.\n\n```go\nfunc (cs customString) PrintInChinese() string {\n    // ...\n}\n\ncs.PrintInChinese()\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## TRY IT OUT\n\n![Rob Pike](../../images/rob-pike.png)\n\n</br>\n\n### Exercise: Distance converter\n\n> Create a new type 'distance' from an existing number type.\n\n> Declare a variable of type 'distance'; lets call it 'miles'.\n\n> Create a method for the 'distance' type that converts the distance to kilometers.\n\n> Call the method on the 'miles' variable and print the result.\n\n<!-- You can also think about the attribute argument as: func (this TheType) TheFunction() {} -->\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Complex types\n\nWe got two complex types in Go: **Structs** and **Interfaces**.\n\n### Structures\n\n* They are similar to the idea of a class\n* Got a default constructor mechanism\n* Can have methods\n* A data type with strongly typed properties\n\n### Interfaces\n\n* A collection of method signatures\n* Emulates polymorphism from OOP\n* Interfaces can be embedded in other interfaces\n* Implicit implementation\n  \n</br>\n</br>\n","slug":"type-definitions-and-methods","title":"Type definitions and methods","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/K-type-definitions-and-methods.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/structs","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/control-structures"}},"__N_SSG":true}