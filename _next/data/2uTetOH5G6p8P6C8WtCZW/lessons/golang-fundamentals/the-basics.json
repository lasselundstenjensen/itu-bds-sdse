{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"The basics","keywords":["Software engineering","Go"]},"html":"<h1>Go basics</h1>\n<p>In this lesson, we will cover the fundamentals of the Go programming language.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<ul>\n<li>Syntax rules; use of curly braces, case-sensitivity, comments</li>\n<li>Modules</li>\n<li>Variables, types and constants</li>\n<li>Data types</li>\n<li>Visibility</li>\n<li>Collections</li>\n<li>Numbers</li>\n<li>Functions</li>\n<li>Pointers and references</li>\n<li>Control structures</li>\n<li>panic, defer</li>\n<li>Error handling design pattern</li>\n<li>Packages to organize, share and use code</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>As a practical exercise (well, many exercises) along the way, we are going to build a command line tool that can compress and decompress bitmap images.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Language types</h2>\n</br>\n</br>\n\n<p><img src=\"../../images/lessons/golang-fundamentals/languages-ship-as.svg\" alt=\"Languages ship as\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><img src=\"../../images/lessons/golang-fundamentals/go-ship-as.svg\" alt=\"Languages ship as\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Basic rules</h2>\n<ul>\n<li>We use <code>.go</code> files</li>\n<li>Code blocks in <code>{}</code></li>\n<li>No styling freedom</li>\n<li>We do have semi-colon to separate sentences</li>\n<li>They are optional though</li>\n<li>Case-senstive</li>\n<li>Strongly typed</li>\n<li>NOT an object-oriented language</li>\n<li>No classes, no inheritance</li>\n<li>No exceptions, no try-catch</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<ul>\n<li>We have one file acting as the entry point with a main function</li>\n<li>A folder is a package</li>\n<li>Packages can have simple names (utilities) or URLs (github.com/username/project)</li>\n<li>Within one <code>.go</code> file, we can have:<ul>\n<li>Variables</li>\n<li>Functions</li>\n<li>Type declarations</li>\n<li>Method declarations</li>\n</ul>\n</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Modules</h2>\n<ul>\n<li>A module is a group of packages</li>\n<li>You can think of it as a project</li>\n<li>Modules contain a <code>go.mod</code> file that contains the module name, configuration and metadata (about dependencies)</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> While having a module for a directory is not mandatory for Go code to run, modules is a way to organize your code and dependencies into chunks much like a small project. By creating the <code>go.mod</code> file, you are creating a module. The real power of modules comes into light when you start to use dependencies as a module helps you manage them.</p>\n</blockquote>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>CLI</h2>\n<p>It manipulates the module</p>\n<ul>\n<li><code>go mod init</code> -&gt; initializes the module</li>\n<li><code>go build</code> -&gt; builds the module</li>\n<li><code>go test</code> -&gt; tests the module</li>\n<li><code>go run</code> -&gt; builds and runs the module</li>\n<li><code>go get</code> -&gt; retrieves dependencies</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Creating a module</h2>\n<ol>\n<li>Create a new folder (e.g. <code>gointro</code>)</li>\n<li>Run <code>go mod init &lt;module-name&gt;</code></li>\n</ol>\n</br>\n</br>\n\n<p>You will get a <code>go.mod</code> file with the module name and Go version the code is to be compiled in.</p>\n<p>Very simple.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><code>go.mod</code> example:</p>\n<pre><code class=\"hljs language-go\">module itu.com/bds/gointro\n\n<span class=\"hljs-keyword\">go</span> <span class=\"hljs-number\">1.23</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Running the module</h2>\n<pre><code class=\"hljs language-bash\">go run .\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>If you are coming from <strong>JavaScript</strong>, the <code>go.mod</code> file is similar to the <code>package.json</code> file.</p>\n<p>Similarly, if you are coming from <strong>Python</strong>, the <code>go.mod</code> file is similar to the <code>requirements.txt</code>. Or <code>pyproject.toml</code> file when using Poetry.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Workspaces</h2>\n<p>Kind of a &quot;super module&quot; that can be used to organize projects into multiple modules.</p>\n<ul>\n<li>Introduced in Go 1.18</li>\n</ul>\n<p>It contains a <code>go.work</code> file that contains configuration and metadataâ€”including which module to use.</p>\n<p>The Go CLI manipulates the workspace.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Creating a workspace</h2>\n<ol>\n<li>Create a new folder</li>\n<li><code>go work init &lt;modules-directory&gt;</code></li>\n</ol>\n<p>The <code>go work init</code> command tells <em>go</em> to create a <code>go.work</code> file for a workspace containing the modules in the <code>&lt;modules-directory&gt;</code> directory.</p>\n<p>For more details: <a href=\"https://go.dev/doc/tutorial/workspaces\">https://go.dev/doc/tutorial/workspaces</a></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><code>go.work</code> example:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">go</span> <span class=\"hljs-number\">1.23</span>\n\nuse ./gointro\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>But really, modules and packages are all you are going to need.</p>\n","markdown":"\n# Go basics\n\nIn this lesson, we will cover the fundamentals of the Go programming language.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n- Syntax rules; use of curly braces, case-sensitivity, comments\n- Modules\n- Variables, types and constants\n- Data types\n- Visibility\n- Collections\n- Numbers\n- Functions\n- Pointers and references\n- Control structures\n- panic, defer\n- Error handling design pattern\n- Packages to organize, share and use code\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nAs a practical exercise (well, many exercises) along the way, we are going to build a command line tool that can compress and decompress bitmap images.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Language types\n\n</br>\n</br>\n\n![Languages ship as](../../images/lessons/golang-fundamentals/languages-ship-as.svg)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n![Languages ship as](../../images/lessons/golang-fundamentals/go-ship-as.svg)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Basic rules\n\n- We use `.go` files\n- Code blocks in `{}`\n- No styling freedom\n- We do have semi-colon to separate sentences\n- They are optional though\n- Case-senstive\n- Strongly typed\n- NOT an object-oriented language\n- No classes, no inheritance\n- No exceptions, no try-catch\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n- We have one file acting as the entry point with a main function\n- A folder is a package\n- Packages can have simple names (utilities) or URLs (github.com/username/project)\n- Within one `.go` file, we can have:\n  - Variables\n  - Functions\n  - Type declarations\n  - Method declarations\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Modules\n\n- A module is a group of packages\n- You can think of it as a project\n- Modules contain a `go.mod` file that contains the module name, configuration and metadata (about dependencies)\n\n> **Note:** While having a module for a directory is not mandatory for Go code to run, modules is a way to organize your code and dependencies into chunks much like a small project. By creating the `go.mod` file, you are creating a module. The real power of modules comes into light when you start to use dependencies as a module helps you manage them.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## CLI\n\nIt manipulates the module\n- `go mod init` -> initializes the module\n- `go build` -> builds the module\n- `go test` -> tests the module\n- `go run` -> builds and runs the module\n- `go get` -> retrieves dependencies\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Creating a module\n\n1. Create a new folder (e.g. `gointro`)\n2. Run `go mod init <module-name>`\n\n</br>\n</br>\n\nYou will get a `go.mod` file with the module name and Go version the code is to be compiled in.\n\nVery simple.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n`go.mod` example:\n\n```go\nmodule itu.com/bds/gointro\n\ngo 1.23\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Running the module\n\n```bash\ngo run .\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nIf you are coming from **JavaScript**, the `go.mod` file is similar to the `package.json` file.\n\nSimilarly, if you are coming from **Python**, the `go.mod` file is similar to the `requirements.txt`. Or `pyproject.toml` file when using Poetry.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Workspaces\n\nKind of a \"super module\" that can be used to organize projects into multiple modules.\n\n- Introduced in Go 1.18\n\nIt contains a `go.work` file that contains configuration and metadataâ€”including which module to use.\n\nThe Go CLI manipulates the workspace.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Creating a workspace\n\n1. Create a new folder\n2. `go work init <modules-directory>`\n\nThe `go work init` command tells *go* to create a `go.work` file for a workspace containing the modules in the `<modules-directory>` directory.\n\nFor more details: https://go.dev/doc/tutorial/workspaces\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n`go.work` example:\n\n```go\ngo 1.23\n\nuse ./gointro\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nBut really, modules and packages are all you are going to need.\n","slug":"the-basics","title":"The basics","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/A-the-basics.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/variables-types-const","prevSlug":"/itu-bds-sdse/lessons/golang-introduction/multi-platform-and-common-use-cases"}},"__N_SSG":true}