{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Factories","keywords":["Software engineering","Go"]},"html":"<h2>Factories</h2>\n<ul>\n<li>Remember: No constructors in Go.</li>\n</ul>\n<p>Instead we use the <strong>design pattern</strong>: Factory</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewPerson</span><span class=\"hljs-params\">(name <span class=\"hljs-type\">string</span>, age <span class=\"hljs-type\">int</span>)</span></span> Person {\n    <span class=\"hljs-keyword\">return</span> Person{name, age}\n}\n</code></pre></br>\n\n<blockquote>\n<p>With some clever naming, we could name a package <code>person</code> and the function <code>New</code> to make it look like a constructor, i.e. <code>person.New(&quot;John&quot;, 30)</code>.</p>\n</blockquote>\n</br>\n</br>\n","markdown":"\n## Factories\n\n* Remember: No constructors in Go.\n\nInstead we use the **design pattern**: Factory\n\n```go\nfunc NewPerson(name string, age int) Person {\n    return Person{name, age}\n}\n```\n\n</br>\n\n> With some clever naming, we could name a package `person` and the function `New` to make it look like a constructor, i.e. `person.New(\"John\", 30)`.\n\n</br>\n</br>\n","slug":"factories","title":"Factories","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/N-factories.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/implementing-interfaces","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/struct-methods"}},"__N_SSG":true}