{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Control structures","keywords":["Software engineering","Go"]},"html":"<h2>Control structures</h2>\n</br>\n\n<ul>\n<li><strong>if</strong> - <strong>else</strong></li>\n<li><strong>switch</strong></li>\n<li><strong>for</strong></li>\n</ul>\n</br>\n\n<ul>\n<li>No <strong>while</strong> or <strong>do</strong>-<strong>while</strong> loops.</li>\n</ul>\n</br>\n\n<ul>\n<li>No parenthesis around boolean conditions or values.</li>\n<li>Only equality operator is <code>==</code>.</li>\n<li>Other operators: <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>if - else</h2>\n<ul>\n<li>Can have multiple conditions.</li>\n</ul>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">if</span> message != <span class=\"hljs-literal\">nil</span> {\n} <span class=\"hljs-keyword\">else</span> {\n}\n\n<span class=\"hljs-comment\">// Variable available in special scope, condition is last</span>\n<span class=\"hljs-keyword\">if</span> text := <span class=\"hljs-string\">&quot;hello&quot;</span>; message != <span class=\"hljs-literal\">nil</span> {\n} <span class=\"hljs-keyword\">else</span> {\n}\n</code></pre><ul>\n<li>There is no ternary operator in Goâ€”e.g. in Python you can do the following, but not in Go:</li>\n</ul>\n<h3><strong>Python</strong></h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># python ternary operator</span>\n<span class=\"hljs-built_in\">min</span> = <span class=\"hljs-string\">&quot;a is minimum&quot;</span> <span class=\"hljs-keyword\">if</span> a &lt; b <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;b is minimum&quot;</span>\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>switch</h2>\n<ul>\n<li>No <code>break</code> statement needed.</li>\n<li><code>fallthrough</code> keyword is used to go to the next case.</li>\n</ul>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">switch</span> day {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;Wednesday&quot;</span>:\n        fmt.Println(<span class=\"hljs-string\">&quot;Time for class! ðŸ“š&quot;</span>)\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;Friday&quot;</span>:\n        fmt.Println(<span class=\"hljs-string\">&quot;Woooh! Parteeey! ðŸŽ‰&quot;</span>)\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;Saturday&quot;</span>:\n        <span class=\"hljs-keyword\">fallthrough</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;Sunday&quot;</span>:\n        fmt.Println(<span class=\"hljs-string\">&quot;Weekend ðŸŒž&quot;</span>)\n    <span class=\"hljs-keyword\">default</span>:\n        fmt.Println(<span class=\"hljs-string\">&quot;It&#x27;s another day ðŸ˜´&quot;</span>)\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>switch (with conditions)</h2>\n<ul>\n<li>Great for replacing large if-else chains.</li>\n</ul>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">switch</span> {\n    <span class=\"hljs-keyword\">case</span> message == <span class=\"hljs-literal\">nil</span>:\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">case</span> message != <span class=\"hljs-literal\">nil</span> &amp;&amp; message.Text == <span class=\"hljs-string\">&quot;&quot;</span>:\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">case</span> message.Sent == <span class=\"hljs-literal\">true</span>:\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">default</span>:\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>for</h2>\n<ul>\n<li>Multi-purpose loop.</li>\n</ul>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">// Classic loop</span>\n<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(myCollection); i++ {\n}\n\n<span class=\"hljs-comment\">// Loop over a collection</span>\n<span class=\"hljs-keyword\">for</span> index := <span class=\"hljs-keyword\">range</span> myCollection {\n}\n\n<span class=\"hljs-comment\">// Loop over a map</span>\n<span class=\"hljs-keyword\">for</span> key, value := <span class=\"hljs-keyword\">range</span> myMap {\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>for (continued)</h2>\n<ul>\n<li>We can emulate a <code>while</code> loop with boolean expressions.</li>\n</ul>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">// Emulating a while loop</span>\nquit := <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-keyword\">for</span> quit {\n    <span class=\"hljs-comment\">// process ... then set &#x27;quit&#x27; to true to exit</span>\n}\n\ncount := <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> count &lt; <span class=\"hljs-number\">10</span> {\n    count++\n}\n</code></pre></br>\n\n<pre><code class=\"hljs language-go\"><span class=\"hljs-comment\">// Infinite loop</span>\n<span class=\"hljs-keyword\">for</span> {\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>TRY IT OUT</h2>\n<p><img src=\"../../images/rob-pike.png\" alt=\"Rob Pike\"></p>\n</br>\n\n<blockquote>\n<p>Build a simple calculator command line application that takes two numbers and an operator as input and outputs the result.</p>\n<p><strong>HINT:</strong> Use the <code>fmt.Scanf()</code> function to read input from the user.</p>\n<p><strong>HINT:</strong> Use a <code>switch</code> statement to determine the operation to perform.</p>\n</blockquote>\n</br>\n</br>\n","markdown":"\n## Control structures\n\n</br>\n\n* **if** - **else**\n* **switch**\n* **for**\n\n</br>\n\n* No **while** or **do**-**while** loops.\n\n</br>\n\n* No parenthesis around boolean conditions or values.\n* Only equality operator is `==`.\n* Other operators: `!=`, `<`, `>`, `<=`, `>=`.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## if - else\n\n* Can have multiple conditions.\n\n```go\nif message != nil {\n} else {\n}\n\n// Variable available in special scope, condition is last\nif text := \"hello\"; message != nil {\n} else {\n}\n```\n\n* There is no ternary operator in Goâ€”e.g. in Python you can do the following, but not in Go:\n\n### **Python**\n\n```python\n# python ternary operator\nmin = \"a is minimum\" if a < b else \"b is minimum\"\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## switch\n\n* No `break` statement needed.\n* `fallthrough` keyword is used to go to the next case.\n\n```go\nswitch day {\n    case \"Wednesday\":\n        fmt.Println(\"Time for class! ðŸ“š\")\n    case \"Friday\":\n        fmt.Println(\"Woooh! Parteeey! ðŸŽ‰\")\n    case \"Saturday\":\n        fallthrough\n    case \"Sunday\":\n        fmt.Println(\"Weekend ðŸŒž\")\n    default:\n        fmt.Println(\"It's another day ðŸ˜´\")\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## switch (with conditions)\n\n* Great for replacing large if-else chains.\n\n```go\nswitch {\n    case message == nil:\n    // ...\n    case message != nil && message.Text == \"\":\n    // ...\n    case message.Sent == true:\n    // ...\n    default:\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## for\n\n* Multi-purpose loop.\n\n```go\n// Classic loop\nfor i := 0; i < len(myCollection); i++ {\n}\n\n// Loop over a collection\nfor index := range myCollection {\n}\n\n// Loop over a map\nfor key, value := range myMap {\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## for (continued)\n\n* We can emulate a `while` loop with boolean expressions.\n\n```go\n// Emulating a while loop\nquit := false\nfor quit {\n    // process ... then set 'quit' to true to exit\n}\n\ncount := 0\nfor count < 10 {\n    count++\n}\n```\n\n</br>\n\n```go\n// Infinite loop\nfor {\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## TRY IT OUT\n\n![Rob Pike](../../images/rob-pike.png)\n\n</br>\n\n> Build a simple calculator command line application that takes two numbers and an operator as input and outputs the result.\n>\n> **HINT:** Use the `fmt.Scanf()` function to read input from the user.\n> \n> **HINT:** Use a `switch` statement to determine the operation to perform.\n\n</br>\n</br>\n","slug":"control-structures","title":"Control structures","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/J-control-structures.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/type-definitions-and-methods","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/panic-defer-recover-error-handling"}},"__N_SSG":true}