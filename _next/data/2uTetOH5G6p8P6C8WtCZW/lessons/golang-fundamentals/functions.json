{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Functions","keywords":["Software engineering","Go"]},"html":"<h2>Functions</h2>\n<p>Go functions are similar to functions in other programming languages.</p>\n<ul>\n<li>A function can take zero or more arguments.</li>\n<li>Arguments can have default values.</li>\n<li>The last argument can be variadic (variable lenght).</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h3><strong>Some things to be aware of</strong></h3>\n<ul>\n<li>Functions can return more than one value.</li>\n<li>Functions can return labeled variables.</li>\n<li>Functions always receive arguments by value.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><strong>Syntax and use:</strong></p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">load</span><span class=\"hljs-params\">()</span></span> {}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">load</span><span class=\"hljs-params\">(file <span class=\"hljs-type\">string</span>)</span></span> {}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(a <span class=\"hljs-type\">int</span>, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\n    <span class=\"hljs-keyword\">return</span> a + b\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">subtract</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> <span class=\"hljs-type\">int</span> {\n    <span class=\"hljs-keyword\">return</span> a - b\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">addAndSubtract</span><span class=\"hljs-params\">(a <span class=\"hljs-type\">int</span>, b <span class=\"hljs-type\">int</span>)</span></span> (<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>) {\n    <span class=\"hljs-keyword\">return</span> a + b, a - b\n}\n</code></pre><p>Labelled return values, but try to limit the use of this as it obscures where return values are set as functions grow tall.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">multiply</span><span class=\"hljs-params\">(a, b <span class=\"hljs-type\">int</span>)</span></span> (result <span class=\"hljs-type\">int</span>) {\n    result = a * b\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Using function return values</h2>\n<p>Escape the return values you don&#39;t need with <code>_</code>.</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    sum, _ := addAndSubtract(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n    fmt.Println(sum)\n}\n</code></pre></br>\n</br>\n\n<blockquote>\n<p>Why would you want to escape a return value?</p>\n</blockquote>\n</br>\n</br>\n","markdown":"\n## Functions\n\nGo functions are similar to functions in other programming languages.\n\n- A function can take zero or more arguments.\n- Arguments can have default values.\n- The last argument can be variadic (variable lenght).\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n### **Some things to be aware of**\n\n- Functions can return more than one value.\n- Functions can return labeled variables.\n- Functions always receive arguments by value.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n**Syntax and use:**\n\n```go\nfunc load() {}\nfunc load(file string) {}\n\nfunc add(a int, b int) int {\n    return a + b\n}\n\nfunc subtract(a, b int) int {\n    return a - b\n}\n\nfunc addAndSubtract(a int, b int) (int, int) {\n    return a + b, a - b\n}\n```\n\nLabelled return values, but try to limit the use of this as it obscures where return values are set as functions grow tall.\n\n```go\nfunc multiply(a, b int) (result int) {\n    result = a * b\n    return\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Using function return values\n\nEscape the return values you don't need with `_`.\n\n```go\nfunc main() {\n    sum, _ := addAndSubtract(1, 2)\n    fmt.Println(sum)\n}\n```\n\n</br>\n</br>\n\n> Why would you want to escape a return value?\n\n</br>\n</br>\n","slug":"functions","title":"Functions","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/G-functions.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/pointers-and-references","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/numbers-and-collections"}},"__N_SSG":true}