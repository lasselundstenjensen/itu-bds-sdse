{"pageProps":{"post":{"attributes":{"description":"Fundamentals of the Go programming language.","title":"Variables, Types, and Constants","keywords":["Software engineering","Go"]},"html":"<h2>Defining variables</h2>\n<p>Using the <code>var</code> keyword, you can define a variable in Go. The syntax is as follows:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> x <span class=\"hljs-type\">int</span>\n<span class=\"hljs-keyword\">var</span> name <span class=\"hljs-type\">string</span>\n<span class=\"hljs-keyword\">const</span> pi = <span class=\"hljs-number\">3.14</span>\n</code></pre></br>\n</br>\n\n<blockquote>\n<p>Data types come after the variable identifer and are mandatory in this form.</p>\n</blockquote>\n<blockquote>\n<p>Variables value is <strong>nil</strong> by default.</p>\n</blockquote>\n<blockquote>\n<p>Constants can only be bool, string or numbers. Always need a value.</p>\n</blockquote>\n<blockquote>\n<p>In Go constants are <strong><em>true</em> constants</strong> and not immutable variables—unlike in Python, JavaScript and others. This means less runtime overhead.</p>\n</blockquote>\n</br>\n</br>\n\n<p>Generally, you can expect Go to infer the type of a variable based on the value you assign to it. </p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> z <span class=\"hljs-type\">int</span> = <span class=\"hljs-number\">42</span>\n\n<span class=\"hljs-keyword\">var</span> text <span class=\"hljs-type\">string</span>\ntext = <span class=\"hljs-string\">&quot;Hello!&quot;</span>\n\nlastName := <span class=\"hljs-string\">&quot;Doe&quot;</span>\n</code></pre></br>\n</br>\n\n<blockquote>\n<p>Variables can be created with initialization.</p>\n</blockquote>\n<blockquote>\n<p>Strings use double quotes.</p>\n</blockquote>\n<blockquote>\n<p>Initialization shortcut. Only valid inside functions.</p>\n</blockquote>\n</br>\n</br>\n\n<p>Backticks <code>`</code> are used for raw string literals.</p>\n<!-- Semicolon?\n\n![Semicolon](../../images/lessons/golang-fundamentals/we-dont-do-that-here.png)\n -->\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>TRY IT OUT</h2>\n<p><img src=\"../../images/rob-pike.png\" alt=\"Rob Pike\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><strong>Question:</strong> When might we want to specify a type for numbers?</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Scope</h2>\n<blockquote>\n<p>Variables are scoped to the block in which they are declared.</p>\n</blockquote>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-comment\">// global-scoped (within package) variables</span>\n...\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-comment\">// function-scoped variables</span>\n    ...\n    {\n        <span class=\"hljs-comment\">// block-scoped variables</span>\n    }\n}\n</code></pre>","markdown":"\n## Defining variables\n\nUsing the `var` keyword, you can define a variable in Go. The syntax is as follows:\n\n```go\nvar x int\nvar name string\nconst pi = 3.14\n```\n\n</br>\n</br>\n\n> Data types come after the variable identifer and are mandatory in this form.\n\n> Variables value is **nil** by default.\n\n> Constants can only be bool, string or numbers. Always need a value.\n\n> In Go constants are ***true* constants** and not immutable variables—unlike in Python, JavaScript and others. This means less runtime overhead.\n\n</br>\n</br>\n\nGenerally, you can expect Go to infer the type of a variable based on the value you assign to it. \n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n```go\nvar z int = 42\n\nvar text string\ntext = \"Hello!\"\n\nlastName := \"Doe\"\n```\n\n</br>\n</br>\n\n> Variables can be created with initialization.\n\n> Strings use double quotes.\n\n> Initialization shortcut. Only valid inside functions.\n\n</br>\n</br>\n\nBackticks `` ` `` are used for raw string literals.\n\n<!-- Semicolon?\n\n![Semicolon](../../images/lessons/golang-fundamentals/we-dont-do-that-here.png)\n -->\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## TRY IT OUT\n\n![Rob Pike](../../images/rob-pike.png)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n**Question:** When might we want to specify a type for numbers?\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Scope\n\n> Variables are scoped to the block in which they are declared.\n\n```go\npackage main\n\n// global-scoped (within package) variables\n...\n\nfunc main() {\n    // function-scoped variables\n    ...\n    {\n        // block-scoped variables\n    }\n}\n```\n","slug":"variables-types-const","title":"Variables, Types, and Constants","section":"Go fundamentals","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/04-golang-fundamentals/B-variables-types-const.md","nextSlug":"/itu-bds-sdse/lessons/golang-fundamentals/data-types","prevSlug":"/itu-bds-sdse/lessons/golang-fundamentals/the-basics"}},"__N_SSG":true}