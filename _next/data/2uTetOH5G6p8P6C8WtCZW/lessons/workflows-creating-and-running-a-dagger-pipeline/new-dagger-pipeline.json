{"pageProps":{"post":{"attributes":{"title":"New Dagger pipeline"},"html":"<h2>Create a new pipeline</h2>\n</br>\n\n<h3>Pseudo structure of the pipeline (in Go)</h3>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-comment\">// Create a shared background context</span>\n\n    <span class=\"hljs-comment\">// Run pipeline stages</span>\n    stage()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stage</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-comment\">// Create a Dagger client</span>\n    <span class=\"hljs-comment\">// Define the code you want to run</span>\n}\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>For our example, we want to create a pipeline that does the following:</p>\n<ol>\n<li>Sets up a Docker container from a specific image.</li>\n<li>Takes a python file from a local directory on the host environment.</li>\n<li>Runs the python file in a Docker container.</li>\n<li>Copies the output from the Docker container to a local directory on the host environment.</li>\n</ol>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><img src=\"https://media1.tenor.com/m/U902tn7xZ_wAAAAC/adventure-time-jake.gif\" alt=\"Lets do this\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Directories and files</h2>\n<p>We need to create some directories and files for this to work. This is what we are aiming for:</p>\n<p><img src=\"../../images/lessons/dagger/dagger-files.png\" alt=\"Directory structure\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>First create the <code>go</code> directory and initialize the Go module:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> go\n\n<span class=\"hljs-built_in\">cd</span> go\n\ngo mod init daggerpipeline\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>Then create the <code>pipeline.go</code> file:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">touch</span> pipeline.go\n</code></pre></br>\n</br>\n\n<p>Add the following code to the <code>pipeline.go</code> file:</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n    <span class=\"hljs-string\">&quot;context&quot;</span>\n    <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n    <span class=\"hljs-string\">&quot;dagger.io/dagger&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    <span class=\"hljs-comment\">// Create a shared context</span>\n    ctx := context.Background()\n\n    <span class=\"hljs-comment\">// Run the stages of the pipeline</span>\n    <span class=\"hljs-keyword\">if</span> err := Build(ctx); err != <span class=\"hljs-literal\">nil</span> {\n        fmt.Println(<span class=\"hljs-string\">&quot;Error:&quot;</span>, err)\n        <span class=\"hljs-built_in\">panic</span>(err)\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Build</span><span class=\"hljs-params\">(ctx context.Context)</span></span> <span class=\"hljs-type\">error</span> {\n    <span class=\"hljs-comment\">// Initialize Dagger client</span>\n    client, err := dagger.Connect(ctx)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> err\n    }\n    <span class=\"hljs-keyword\">defer</span> client.Close()\n\n    python := client.Container().From(<span class=\"hljs-string\">&quot;python:3.12.2-bookworm&quot;</span>).\n        WithDirectory(<span class=\"hljs-string\">&quot;python&quot;</span>, client.Host().Directory(<span class=\"hljs-string\">&quot;python-files&quot;</span>)).\n        WithExec([]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;--version&quot;</span>})\n\n    python = python.WithExec([]<span class=\"hljs-type\">string</span>{<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;python/hello.py&quot;</span>})\n\n    _, err = python.\n        Directory(<span class=\"hljs-string\">&quot;output&quot;</span>).\n        Export(ctx, <span class=\"hljs-string\">&quot;output&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> err\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n</code></pre></br>\n</br>\n\n<p>We need to download the Go dependencies as well:</p>\n<pre><code class=\"hljs language-bash\">go mod tidy\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>Next, create a directory for the python file and add a python file called <code>hello.py</code>:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">mkdir</span> python-files\n\n<span class=\"hljs-built_in\">cd</span> python-files\n\n<span class=\"hljs-built_in\">touch</span> hello.py\n</code></pre><p>The content of <code>hello.py</code>:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-comment\"># Write to a file in a new directory called &quot;output&quot;</span>\n<span class=\"hljs-keyword\">import</span> os\n\nos.makedirs(<span class=\"hljs-string\">&quot;output&quot;</span>, exist_ok=<span class=\"hljs-literal\">True</span>)\n\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;output/hello-from-python.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> f:\n    f.write(<span class=\"hljs-string\">&quot;Hello from Python in Dagger!\\n&quot;</span>)\n</code></pre></br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p>All good now! Next, we will try and run it locally.</p>\n<p>Remember to navigate back to the <code>go</code> directory before running Dagger!</p>\n</br>\n</br>\n\n<p>You can also find the complete example here <a href=\"https://github.com/lasselundstenjensen/itu-bds-sdse-dagger-and-github/tree/main/go\">GitHub</a>.</p>\n</br>\n</br>\n","markdown":"\n## Create a new pipeline\n\n</br>\n\n### Pseudo structure of the pipeline (in Go)\n\n```go\npackage main\n\nfunc main() {\n    // Create a shared background context\n\n    // Run pipeline stages\n    stage()\n}\n\nfunc stage() {\n    // Create a Dagger client\n    // Define the code you want to run\n}\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nFor our example, we want to create a pipeline that does the following:\n\n1. Sets up a Docker container from a specific image.\n2. Takes a python file from a local directory on the host environment.\n3. Runs the python file in a Docker container.\n4. Copies the output from the Docker container to a local directory on the host environment.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n![Lets do this](https://media1.tenor.com/m/U902tn7xZ_wAAAAC/adventure-time-jake.gif)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Directories and files\n\nWe need to create some directories and files for this to work. This is what we are aiming for:\n\n![Directory structure](../../images/lessons/dagger/dagger-files.png)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nFirst create the `go` directory and initialize the Go module:\n\n```bash\nmkdir go\n\ncd go\n\ngo mod init daggerpipeline\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nThen create the `pipeline.go` file:\n\n```bash\ntouch pipeline.go\n```\n\n</br>\n</br>\n\nAdd the following code to the `pipeline.go` file:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"dagger.io/dagger\"\n)\n\nfunc main() {\n\t// Create a shared context\n\tctx := context.Background()\n\n\t// Run the stages of the pipeline\n\tif err := Build(ctx); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\tpanic(err)\n\t}\n}\n\nfunc Build(ctx context.Context) error {\n\t// Initialize Dagger client\n\tclient, err := dagger.Connect(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer client.Close()\n\n\tpython := client.Container().From(\"python:3.12.2-bookworm\").\n\t\tWithDirectory(\"python\", client.Host().Directory(\"python-files\")).\n\t\tWithExec([]string{\"python\", \"--version\"})\n\n\tpython = python.WithExec([]string{\"python\", \"python/hello.py\"})\n\n\t_, err = python.\n\t\tDirectory(\"output\").\n\t\tExport(ctx, \"output\")\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```\n\n</br>\n</br>\n\nWe need to download the Go dependencies as well:\n\n```bash\ngo mod tidy\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nNext, create a directory for the python file and add a python file called `hello.py`:\n\n```bash\nmkdir python-files\n\ncd python-files\n\ntouch hello.py\n```\n\nThe content of `hello.py`:\n\n```python\n# Write to a file in a new directory called \"output\"\nimport os\n\nos.makedirs(\"output\", exist_ok=True)\n\nwith open(\"output/hello-from-python.txt\", \"w\") as f:\n    f.write(\"Hello from Python in Dagger!\\n\")\n```\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\nAll good now! Next, we will try and run it locally.\n\nRemember to navigate back to the `go` directory before running Dagger!\n\n</br>\n</br>\n\nYou can also find the complete example here [GitHub](https://github.com/lasselundstenjensen/itu-bds-sdse-dagger-and-github/tree/main/go).\n\n</br>\n</br>\n","slug":"new-dagger-pipeline","title":"New Dagger pipeline","section":"Creating and running a Dagger pipeline","icon":"code","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/10-workflows-creating-and-running-a-dagger-pipeline/A-new-dagger-pipeline.md","nextSlug":"/itu-bds-sdse/lessons/workflows-creating-and-running-a-dagger-pipeline/but-first-how-does-this-work","prevSlug":"/itu-bds-sdse/lessons/workflows-introducing-dagger/typical-structure"}},"__N_SSG":true}