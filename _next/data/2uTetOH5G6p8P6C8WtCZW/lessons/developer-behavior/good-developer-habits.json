{"pageProps":{"post":{"attributes":{"description":"Basics of Git.","title":"Good developer habits","keywords":["Software engineering","Git"]},"html":"<p>“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”</p>\n<p>—<em><a href=\"https://martinfowler.com/books/refactoring.html\" title=\"Refactoring: Improving the Design of Existing Code\">Refactoring</a>, Martin Fowler with Kent Beck, 1996</em></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Always start with the foundation</h2>\n<p>This means before we actually start building &quot;the thing&quot;, we need to have setup a repeatable way to build/run/deploy &quot;the thing&quot;.</p>\n<p>This allows us to move fast and iterate quickly.</p>\n<p>It is <em>always</em> a pain to setup the foundation after we have started building &quot;the thing&quot;. The code will tend to encircle manual, undocumented processes.</p>\n</br>\n\n<p><img src=\"../../images/lessons/build-pipeline-for-docs.png\" alt=\"Docs build pipeline\"></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Broken things are fixed immediately</h2>\n<p><strong>Never leave the pipeline broken</strong>. Fix it immediately. Priority over everything else, especially if we are in a team.</p>\n</br>\n\n<h3>&quot;The broken window theory&quot;</h3>\n<p><em>Suggested reading: <a href=\"https://blog.codinghorror.com/the-broken-window-theory/\">https://blog.codinghorror.com/the-broken-window-theory/</a></em></p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Keep documentation next to the code</h2>\n<p>Simple things like a concise <code>README.md</code> file in the root of the repository with simple and clear instructions can alter the perception of the project and boost its adoption.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Good design is invisible</h2>\n<p>Keep things simple. If it is hard to understand, it is hard to maintain.</p>\n</br>\n</br>\n","markdown":"\n“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.”\n\n—_[Refactoring](https://martinfowler.com/books/refactoring.html \"Refactoring: Improving the Design of Existing Code\"), Martin Fowler with Kent Beck, 1996_\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Always start with the foundation\n\nThis means before we actually start building \"the thing\", we need to have setup a repeatable way to build/run/deploy \"the thing\".\n\nThis allows us to move fast and iterate quickly.\n\nIt is *always* a pain to setup the foundation after we have started building \"the thing\". The code will tend to encircle manual, undocumented processes.\n\n</br>\n\n![Docs build pipeline](../../images/lessons/build-pipeline-for-docs.png)\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Broken things are fixed immediately\n\n**Never leave the pipeline broken**. Fix it immediately. Priority over everything else, especially if we are in a team.\n\n</br>\n\n### \"The broken window theory\"\n\n*Suggested reading: https://blog.codinghorror.com/the-broken-window-theory/*\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Keep documentation next to the code\n\nSimple things like a concise `README.md` file in the root of the repository with simple and clear instructions can alter the perception of the project and boost its adoption.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Good design is invisible\n\nKeep things simple. If it is hard to understand, it is hard to maintain.\n\n</br>\n</br>\n","slug":"good-developer-habits","title":"Good developer habits","section":"Developer behavior","icon":"info-circle","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/08-developer-behavior/A-good-developer-habits.md","nextSlug":"/itu-bds-sdse/lessons/developer-behavior/working-with-github-in-a-team","prevSlug":"/itu-bds-sdse/lessons/branching-strategies/trunk-based-development"}},"__N_SSG":true}