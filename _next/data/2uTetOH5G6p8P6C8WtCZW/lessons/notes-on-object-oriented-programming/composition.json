{"pageProps":{"post":{"attributes":{"title":"Composition","description":"We look at inheritance vs composition","keywords":["Software engineering","Data science","Go","Lasse Lund Sten Jensen"]},"html":"<h1>Composition</h1>\n<p>Composition implements a <strong>&quot;has-a&quot;</strong> relationship. It allows a class to contain an object of another class.</p>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<h2>Advantages</h2>\n<ul>\n<li><strong>Flexibility:</strong> </br></br>Composition and interfaces allow for decoupled designs. You can change the components of a struct or the implementation of an interface without affecting other parts of your program.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<ul>\n<li><strong>Simplicity:</strong> </br></br>Avoiding classical inheritance can lead to simpler, more straightforward code. It encourages thinking in terms of what objects do (behaviors) rather than what they are in an inheritance hierarchy.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<ul>\n<li><strong>Maintainability:</strong> </br></br>Code that uses interfaces and composition is often easier to maintain and extend, as changes tend to be more localized.</li>\n</ul>\n</br>\n</br>\n\n<p>Source: <a href=\"https://medium.com/@chaewonkong/go-composition-and-interfaces-a4b4346f8565\">https://medium.com/@chaewonkong/go-composition-and-interfaces-a4b4346f8565</a></p>\n<!-- TODO: Describe the difference between inheritance and composition. -->\n","markdown":"\n# Composition\n\nComposition implements a **\"has-a\"** relationship. It allows a class to contain an object of another class.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n## Advantages\n\n- **Flexibility:** </br></br>Composition and interfaces allow for decoupled designs. You can change the components of a struct or the implementation of an interface without affecting other parts of your program.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n- **Simplicity:** </br></br>Avoiding classical inheritance can lead to simpler, more straightforward code. It encourages thinking in terms of what objects do (behaviors) rather than what they are in an inheritance hierarchy.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n- **Maintainability:** </br></br>Code that uses interfaces and composition is often easier to maintain and extend, as changes tend to be more localized.\n\n</br>\n</br>\n\nSource: https://medium.com/@chaewonkong/go-composition-and-interfaces-a4b4346f8565\n\n<!-- TODO: Describe the difference between inheritance and composition. -->\n","slug":"composition","title":"Composition","section":"Object Oriented Programming","icon":"info-circle","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/02-notes-on-object-oriented-programming/D-composition.md","nextSlug":"/itu-bds-sdse/lessons/notes-on-object-oriented-programming/summary","prevSlug":"/itu-bds-sdse/lessons/notes-on-object-oriented-programming/what-about-oo-in-go"}},"__N_SSG":true}