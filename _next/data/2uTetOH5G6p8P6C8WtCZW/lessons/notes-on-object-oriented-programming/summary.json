{"pageProps":{"post":{"attributes":{"title":"Differences between inheritance in Python and composition in Go","description":"We look at inheritance vs composition","keywords":["Software engineering","Data science","Go","Lasse Lund Sten Jensen"]},"html":"<h1>Differences between inheritance in Python and composition in Go</h1>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><strong>Key Points about Inheritance in Python:</strong></p>\n<ul>\n<li>Establishes an <strong>&quot;is-a&quot;</strong> relationship. For example, a <code>Dog</code> is an <code>Animal</code>.</li>\n<li>Encourages reuse of code but can lead to tightly coupled code and complex hierarchies.</li>\n<li>Supports polymorphism, where a subclass can be used wherever its superclass is expected.</li>\n<li>Enables code reuse and establishes a hierarchical relationship between classes.</li>\n</ul>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n<p><strong>Key Points about Composition in Go:</strong></p>\n<ul>\n<li>Encourages a <strong>&quot;has-a&quot;</strong> relationship. For example, a <code>Dog</code> has an <code>Animal</code> (behavior).</li>\n<li>Promotes loose coupling and flexible code structure.</li>\n<li>Composition is often preferred in Go for its simplicity and the ability to easily mix and match behaviors.</li>\n<li>Go supports embedding, where methods of the embedded type are promoted to the embedding type, allowing behavior similar to inheritance without the tight coupling.</li>\n</ul>\n</br>\n</br>\n","markdown":"\n# Differences between inheritance in Python and composition in Go\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n**Key Points about Inheritance in Python:**\n\n- Establishes an **\"is-a\"** relationship. For example, a `Dog` is an `Animal`.\n- Encourages reuse of code but can lead to tightly coupled code and complex hierarchies.\n- Supports polymorphism, where a subclass can be used wherever its superclass is expected.\n- Enables code reuse and establishes a hierarchical relationship between classes.\n\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n</br>\n\n**Key Points about Composition in Go:**\n\n- Encourages a **\"has-a\"** relationship. For example, a `Dog` has an `Animal` (behavior).\n- Promotes loose coupling and flexible code structure.\n- Composition is often preferred in Go for its simplicity and the ability to easily mix and match behaviors.\n- Go supports embedding, where methods of the embedded type are promoted to the embedding type, allowing behavior similar to inheritance without the tight coupling.\n\n</br>\n</br>\n","slug":"summary","title":"Differences between inheritance in Python and composition in Go","section":"Object Oriented Programming","icon":"info-circle","filePath":"/home/runner/work/itu-bds-sdse/itu-bds-sdse/lessons/02-notes-on-object-oriented-programming/E-summary.md","nextSlug":"/itu-bds-sdse/lessons/golang-introduction/intro","prevSlug":"/itu-bds-sdse/lessons/notes-on-object-oriented-programming/composition"}},"__N_SSG":true}